// SignalClient.kt
package com.ppnkdeapp.mycontacts.call

import android.util.Log
import io.socket.client.IO
import io.socket.client.Socket
import org.json.JSONObject
import java.net.URISyntaxException

class SignalClient {

    companion object {
        const val SERVER_URL = "https://8f791583-9af0-4ccb-b92f-170da7902e03-00-271lvl54jws4c.sisko.replit.dev"
    }

    interface ConnectionCallback {
        fun onResult(result: String) // "Success" –∏–ª–∏ "Failed"
    }

    private var socket: Socket? = null

    fun connectToSignalingServer(userId: UInt, callback: ConnectionCallback) { // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ UInt
        try {
            val options = IO.Options().apply {
                forceNew = true
                reconnection = false
                timeout = 10000
            }

            socket = IO.socket(SERVER_URL, options).apply {
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                on(Socket.EVENT_CONNECT) {
                    Log.d("SignalClient", "‚úÖ Socket connected, registering user: $userId")
                    // –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    emit("register", userId.toString()) // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UInt –≤ String –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
                }

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                on("registered") { args ->
                    try {
                        val data = args[0] as JSONObject
                        val success = data.getBoolean("success")
                        val registeredUserId = data.getString("userId")

                        Log.d("SignalClient", "‚úÖ User $registeredUserId successfully registered on server")

                        if (success) {
                            callback.onResult("Success")
                        } else {
                            callback.onResult("Failed")
                        }
                    } catch (e: Exception) {
                        Log.e("SignalClient", "‚ùå Error processing registration response: ${e.message}")
                        callback.onResult("Failed")
                    }
                }

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                on(Socket.EVENT_CONNECT_ERROR) { args ->
                    val errorMessage = args.joinToString()
                    Log.e("SignalClient", "‚ùå Connection error: $errorMessage")
                    disconnect()
                    callback.onResult("Failed")
                }

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
//                on(Socket.EVENT_CONNECT_ERROR) { args ->
//                    Log.e("SignalClient", "‚ùå Connection timeout")
//                    disconnect()
//                    callback.onResult("Failed")
//                }

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫
                on(Socket.EVENT_CONNECT_ERROR) { args ->
                    val errorMessage = args.joinToString()
                    Log.e("SignalClient", "‚ùå Socket error: $errorMessage")
                    disconnect()
                    callback.onResult("Failed")
                }

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                on(Socket.EVENT_DISCONNECT) {
                    Log.d("SignalClient", "üîå Socket disconnected")
                }
            }

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            socket?.connect()
            Log.d("SignalClient", "üîó Connection attempt started for user: $userId")

        } catch (e: URISyntaxException) {
            Log.e("SignalClient", "‚ùå URI syntax error: ${e.message}")
            callback.onResult("Failed")
        } catch (e: Exception) {
            Log.e("SignalClient", "‚ùå General error: ${e.message}")
            callback.onResult("Failed")
        }
    }

    fun disconnect() {
        socket?.disconnect()
        socket = null
        Log.d("SignalClient", "üîå SignalClient disconnected")
    }

    fun isConnected(): Boolean {
        return socket?.connected() == true
    }
}