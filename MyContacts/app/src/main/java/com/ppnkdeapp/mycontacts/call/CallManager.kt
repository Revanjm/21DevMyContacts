//package com.ppnkdeapp.mycontacts.call
//
//import android.content.Context
//import android.util.Log
//import androidx.lifecycle.LiveData
//import androidx.lifecycle.MutableLiveData
//import com.ppnkdeapp.mycontacts.models.Call
//import com.ppnkdeapp.mycontacts.models.CallStatus
//import org.json.JSONObject
//import java.util.*
//
//class CallManager(private val context: Context) {
//    private val TAG = "CallManager"
//
//    // –°–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–∑–æ–≤–∞
//    private var isMuted = false
//    private var isSpeakerOn = false
//    private var isProcessingCall = false
//
////    fun toggleMute() {
////        isMuted = !isMuted
////        _callActions.value = CallActions.MuteStateChanged(isMuted)
////        Log.d(TAG, "üé§ Mute: $isMuted")
////    }
////
////    fun toggleSpeaker() {
////        isSpeakerOn = !isSpeakerOn
////        _callActions.value = CallActions.SpeakerStateChanged(isSpeakerOn)
////        Log.d(TAG, "üîä Speaker: $isSpeakerOn")
////    }
//
//    fun isMuted(): Boolean = isMuted
//    fun isSpeakerOn(): Boolean = isSpeakerOn
//
//    // LiveData –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
//    private val _currentCall = MutableLiveData<Call?>()
//    val currentCall: LiveData<Call?> get() = _currentCall
//
//    // LiveData –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
//    private val _incomingCall = MutableLiveData<Call?>()
////    val incomingCall: LiveData<Call?> get() = _incomingCall
//
//    // LiveData –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤ –≤—ã–∑–æ–≤–µ
////    private val _callActions = MutableLiveData<CallActions>()
////    val callActions: LiveData<CallActions> get() = _callActions
//
////    private var webRTCClient: WebRTCClient? = null
////    private var lastCallAttemptAt: Long = 0L
//
////    fun initialize(webRTCClient: WebRTCClient) {
////        this.webRTCClient = webRTCClient
////        setupWebRTCListeners()
////    }
////    fun makeCall(toUserId: String, toUserName: String = ""): Boolean {
////        if (isProcessingCall) {
////            Log.w(TAG, "‚ö†Ô∏è Already processing a call, ignoring duplicate")
////            return false
////        }
////
////        val now = System.currentTimeMillis()
////        if (now - lastCallAttemptAt < 1000L) {
////            Log.w(TAG, "‚è±Ô∏è Call throttled: less than 1s since last attempt")
////            return false
////        }
////
////        isProcessingCall = true
////        lastCallAttemptAt = now
//
////        try {
////            val callId = generateCallId()
//////            val fromUserId = webRTCClient?.getCurrentUserId() ?: return false
////
////            Log.d(TAG, "üìû Making call to: $toUserId, callId: $callId")
////
////            val call = Call(
////                callId = callId,
////                fromUserId = fromUserId,
////                fromUserName = "–í—ã",
////                toUserId = toUserId,
////                status = CallStatus.INITIATING
////            )
////
////            _currentCall.value = call
////
////            if (webRTCClient == null) {
////                Log.e(TAG, "‚ùå WebRTCClient is null!")
////                return false
////            }
////
//////            val callResult = webRTCClient!!.callUser(toUserId, callId)
//////            Log.d(TAG, "üìû WebRTCClient.callUser result: $callResult")
////
////            if (!callResult) {
////                isProcessingCall = false
////            }
////
////            return callResult
////        } catch (e: Exception) {
////            isProcessingCall = false
////            Log.e(TAG, "‚ùå Error making call: ${e.message}")
////            return false
////        }
////    }
//    // –ò–ù–ò–¶–ò–ê–¶–ò–Ø –í–´–ó–û–í–ê
////    fun makeCall(toUserId: String, toUserName: String = ""): Boolean {
////        if (isProcessingCall) {
////            Log.w(TAG, "‚ö†Ô∏è Already processing a call, ignoring duplicate")
////            return false
////        }
////
////        val now = System.currentTimeMillis()
////        if (now - lastCallAttemptAt < 1000L) {
////            Log.w(TAG, "‚è±Ô∏è Call throttled: less than 1s since last attempt")
////            return false
////        }
////
////        isProcessingCall = true
////        lastCallAttemptAt = now
////
////        try {
////            val callId = generateCallId()
////            val fromUserId = webRTCClient?.getCurrentUserId() ?: return false
////
////            Log.d(TAG, "üìû Making call to: $toUserId, callId: $callId")
////
////            val call = Call(
////                callId = callId,
////                fromUserId = fromUserId,
////                fromUserName = "–í—ã",
////                toUserId = toUserId,
////                status = CallStatus.INITIATING
////            )
////
////            _currentCall.value = call
////
////            if (webRTCClient == null) {
////                Log.e(TAG, "‚ùå WebRTCClient is null!")
////                return false
////            }
////
////            val callResult = webRTCClient!!.callUser(toUserId, callId)
////            Log.d(TAG, "üìû WebRTCClient.callUser result: $callResult")
////
////            if (!callResult) {
////                // –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
////                isProcessingCall = false
////            }
////
////            return callResult
////        } catch (e: Exception) {
////            isProcessingCall = false
////            Log.e(TAG, "‚ùå Error making call: ${e.message}")
////            return false
////        }
////    }
//
//    // –ü–†–ò–ù–Ø–¢–ò–ï –í–•–û–î–Ø–©–ï–ì–û –í–´–ó–û–í–ê
////    fun acceptIncomingCall() {
////        val call = _incomingCall.value ?: return
////        Log.d(TAG, "‚úÖ Accepting incoming call: ${call.callId}")
////
////        webRTCClient?.acceptCall(call.fromUserId, call.callId)
////        _incomingCall.value = call.copy(status = CallStatus.ANSWERED)
////        _currentCall.value = _incomingCall.value
////        _incomingCall.value = null
////
////        // –û–±–Ω–æ–≤–ª—è–µ–º UI
////        _callActions.value = CallActions.CallConnected
////    }
//
//    // –û–¢–ö–õ–û–ù–ï–ù–ò–ï –í–•–û–î–Ø–©–ï–ì–û –í–´–ó–û–í–ê
////    fun rejectIncomingCall() {
////        val call = _incomingCall.value ?: return
////        Log.d(TAG, "‚ùå Rejecting incoming call: ${call.callId}")
////
////        webRTCClient?.rejectCall(call.fromUserId, call.callId)
////        _incomingCall.value = call.copy(status = CallStatus.REJECTED)
////        showCallEnded("–í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
////        _incomingCall.value = null
////    }
//
//    // –ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–ï–ö–£–©–ï–ì–û –í–´–ó–û–í–ê
////    fun endCurrentCall() {
////        val call = _currentCall.value ?: return
////        Log.d(TAG, "üìû Ending current call: ${call.callId}")
////
////        webRTCClient?.endCall()
////        _currentCall.value = call.copy(status = CallStatus.ENDED)
////        showCallEnded("–í—ã–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
////        _currentCall.value = null
////        isProcessingCall = false
////    }
//
//    // –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –í–´–ó–û–í–û–í
//
//    // –ö–æ–≥–¥–∞ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—ã–∑–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ WebSocket)
////    fun handleCallAccepted(answer: JSONObject) {
////        Log.d(TAG, "‚úÖ Call accepted by remote user - updating UI only")
////
////        // ‚ùó –£–ë–†–ê–ù–û: webRTCClient?.handleAnswer(answer) - WebRTCClient —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç answer —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
////
////        // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
////        _currentCall.value = _currentCall.value?.copy(status = CallStatus.ANSWERED)
////        _callActions.value = CallActions.CallConnected
//
////        Log.d(TAG, "üìû –í—ã–∑–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω - UI updated")
////    }
//
//    // –ö–æ–≥–¥–∞ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤—ã–∑–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ WebSocket)
////    fun handleCallRejected() {
////        Log.d(TAG, "‚ùå Call rejected by remote user")
////
////        _currentCall.value = _currentCall.value?.copy(status = CallStatus.REJECTED)
////        showCallEnded("–í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
////        _currentCall.value = null
////        isProcessingCall = false
////
////        Log.d(TAG, "üìû –í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
////    }
//
////    // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞
////    private fun showCallEnded(reason: String) {
////        _callActions.value = CallActions.CallEnded(reason)
////        Log.d(TAG, "üìû Call ended: $reason")
////        isProcessingCall = false
////    }
//
//    // –û–ë–†–ê–ë–û–¢–ö–ê –í–•–û–î–Ø–©–ï–ì–û –í–´–ó–û–í–ê –û–¢ –°–ï–†–í–ï–†–ê
////    fun handleIncomingCall(fromUserId: String, fromUserName: String, callId: String) {
////        Log.d(TAG, "üìû Incoming call from: $fromUserId, callId: $callId")
////
////        val call = Call(
////            callId = callId,
////            fromUserId = fromUserId,
////            fromUserName = fromUserName,
////            toUserId = webRTCClient?.getCurrentUserId() ?: "",
////            status = CallStatus.RINGING
////        )
////
////        _incomingCall.value = call
////        _callActions.value = CallActions.IncomingCall(call)
////    }
//
////    private fun setupWebRTCListeners() {
////        webRTCClient?.setListener(object : WebRTCClient.WebRTCListener {
////            override fun onIncomingCall(fromUserId: String, callId: String) {
////                val contactName = getContactNameById(fromUserId)
////                handleIncomingCall(fromUserId, contactName, callId)
////            }
////
////            override fun onCallAccepted(toUserId: String) {
////                Log.d(TAG, "‚úÖ Call accepted by: $toUserId - WebRTC event")
////                _currentCall.value = _currentCall.value?.copy(status = CallStatus.ANSWERED)
////                _callActions.value = CallActions.CallConnected
////                isProcessingCall = false
////            }
////
////            override fun onCallRejected(fromUserId: String) {
////                Log.d(TAG, "‚ùå Call rejected by: $fromUserId - WebRTC event")
////                handleCallRejected()
////            }
////
////            override fun onCallEnded(fromUserId: String) {
////                Log.d(TAG, "üìû Call ended by: $fromUserId")
////                showCallEnded("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–∑–æ–≤")
////                _currentCall.value = null
////                _incomingCall.value = null
////                isProcessingCall = false
////            }
////
////            override fun onCallWaiting(toUserId: String, message: String) {
////                _callActions.value = CallActions.CallWaiting(message)
////            }
////
////            override fun onCallDelivered(toUserId: String, callId: String) {
////                Log.d(TAG, "‚úÖ Call delivered to: $toUserId")
////                _currentCall.value = _currentCall.value?.copy(status = CallStatus.RINGING)
////                _callActions.value = CallActions.CallRinging
////            }
////
////            override fun onCallFailed(error: String) {
////                _currentCall.value = _currentCall.value?.copy(status = CallStatus.FAILED)
////                showCallEnded("–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞: $error")
////                isProcessingCall = false
////            }
////
////            override fun onCallTimeout() {
////                _currentCall.value = _currentCall.value?.copy(status = CallStatus.FAILED)
////                showCallEnded("–¢–∞–π–º–∞—É—Ç –≤—ã–∑–æ–≤–∞")
////                isProcessingCall = false
////            }
////
////            override fun onSocketConnected() {}
////            override fun onSocketDisconnected() {}
////            override fun onRegistrationSuccess(userId: String) {}
////            override fun onRemoteStreamAdded(stream: org.webrtc.MediaStream) {
////                _callActions.value = CallActions.RemoteStreamAdded
////            }
////            override fun onLocalStreamAdded(stream: org.webrtc.MediaStream) {
////                _callActions.value = CallActions.LocalStreamAdded
////            }
////            override fun onIceConnectionStateChanged(state: org.webrtc.PeerConnection.IceConnectionState) {
////                _callActions.value = CallActions.IceStateChanged(state)
////            }
////        })
////    }
////
////    private fun getContactNameById(userId: String): String {
////        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ –±–∞–∑—ã
////        return "–ö–æ–Ω—Ç–∞–∫—Ç—ã" // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
////    }
////
////    private fun generateCallId(): String {
////        return "call_${UUID.randomUUID()}_${System.currentTimeMillis()}"
////    }
////
////    // –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤ –≤—ã–∑–æ–≤–µ
////    sealed class CallActions {
////        object CallConnected : CallActions()
////        object CallRinging : CallActions()
////        object LocalStreamAdded : CallActions()
////        object RemoteStreamAdded : CallActions()
////        data class CallWaiting(val message: String) : CallActions()
////        data class CallEnded(val reason: String) : CallActions()
////        data class IceStateChanged(val state: org.webrtc.PeerConnection.IceConnectionState) : CallActions()
////        data class MuteStateChanged(val isMuted: Boolean) : CallActions()
////        data class SpeakerStateChanged(val isSpeakerOn: Boolean) : CallActions()
////        data class IncomingCall(val call: Call) : CallActions()
////    }
////}
//
