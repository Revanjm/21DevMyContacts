package com.ppnkdeapp.mycontacts

import android.content.Intent
import android.util.Log
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage
import com.ppnkdeapp.mycontacts.call.ConnectionService
import org.json.JSONObject

class MyFirebaseMessagingService : FirebaseMessagingService() {

    private val TAG = "FirebaseMessaging"

    override fun onMessageReceived(remoteMessage: RemoteMessage) {
        super.onMessageReceived(remoteMessage)

        Log.d(TAG, "üì≤ Received WebPush message: ${remoteMessage.from}")
        Log.d(TAG, "üì≤ Message data: ${remoteMessage.data}")

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        val data = remoteMessage.data
        val type = data["type"]

        when (type) {
            "actual_call_update" -> {
                Log.d(TAG, "üìû Processing ActualCall notification")
                handleActualCallUpdate(data)
            }
            "connection_established" -> {
                Log.d(TAG, "‚úÖ Connection established notification")
                handleConnectionEstablished(data)
            }
            else -> {
                Log.w(TAG, "‚ö†Ô∏è Unknown notification type: $type")
                // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ ActualCall –µ—Å–ª–∏ –µ—Å—Ç—å callId
                if (data.containsKey("callId")) {
                    Log.d(TAG, "üìû Processing as ActualCall based on callId presence")
                    handleActualCallUpdate(data)
                }
            }
        }
    }

    private fun handleActualCallUpdate(data: Map<String, String>) {
        try {
            Log.d(TAG, "üìû Processing ActualCall data: $data")
            
            // –°–æ–∑–¥–∞–µ–º JSON –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ ActualCall
            val notificationData = JSONObject().apply {
                put("type", "actual_call_update")
                put("actualCall", JSONObject().apply {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ ActualCall –∏–∑ FCM data
                    put("callId", data["callId"] ?: "")
                    put("callerId", data["callerId"] ?: "")
                    put("recipientId", data["recipientId"] ?: "")
                    put("status", data["status"] ?: "")
                    put("step", data["step"] ?: "")
                    put("createdAt", data["createdAt"]?.toLongOrNull() ?: 0L)
                    put("offerSdp", data["offerSdp"] ?: "")
                    put("answerSdp", data["answerSdp"] ?: "")
                })
            }
            
            Log.d(TAG, "üìû Created notification data: ${notificationData.toString()}")
            
            // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ ConnectionService –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            val intent = Intent(this, ConnectionService::class.java)
            intent.putExtra("action", "handle_push_notification")
            intent.putExtra("notification_data", notificationData.toString())
            startService(intent)
            
            Log.d(TAG, "‚úÖ ActualCall data forwarded to ConnectionService")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error handling ActualCall update: ${e.message}")
            e.printStackTrace()
        }
    }

    private fun handleConnectionEstablished(data: Map<String, String>) {
        Log.d(TAG, "‚úÖ Connection established notification received")
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    override fun onNewToken(token: String) {
        super.onNewToken(token)
        Log.d(TAG, "üîÑ FCM token refreshed: ${token.take(20)}...")
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        // –ù–æ –ø–æ–∫–∞ —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –ø–æ–¥–ø–∏—Å–∫–∏
    }
}