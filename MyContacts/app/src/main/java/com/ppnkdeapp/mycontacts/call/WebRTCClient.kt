package com.ppnkdeapp.mycontacts.call

import android.Manifest
import android.app.Application
import android.content.Context
import android.content.pm.PackageManager
import android.media.AudioManager
import android.os.Handler
import android.os.Looper
import android.util.Log
import androidx.core.content.ContextCompat
import com.ppnkdeapp.mycontacts.MyApp
import io.socket.client.IO
import io.socket.client.Socket
import org.json.JSONObject
import org.webrtc.*
import org.webrtc.audio.JavaAudioDeviceModule
import java.net.HttpURLConnection
import java.net.URL
import java.util.*
import java.util.concurrent.Executors

class WebRTCClient(
    private val context: Context,
    private val serverUrl: String,
    private val userId: String,
    private val listener: WebRTCListener
) {
    private var myApp: MyApp? = null
    private var peerConnection: PeerConnection? = null
    private var socket: Socket? = null
    private var peerConnectionFactory: PeerConnectionFactory? = null
    private var localAudioTrack: AudioTrack? = null
    private var remoteAudioTrack: AudioTrack? = null
    private var audioSource: AudioSource? = null
    private val audioManager = context.getSystemService(Context.AUDIO_SERVICE) as AudioManager

    private var targetUserId: String? = null
    private var currentCallId: String? = null
    private var isCalling = false
    private var isIncomingCall = false
    private var isRegisteredOnServer = false
    
    // üî• –ù–û–í–û–ï: Callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π currentActualCall
    private var actualCallChangeCallback: ((ActualCall?) -> Unit)? = null
    
    // üî• –ù–û–í–û–ï: –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ cleanup()
    private var isCleaningUp = false
    
    // üî• –ù–û–í–û–ï: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π offer –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    private var preparedOffer: SessionDescription? = null

    // ICE —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è NAT traversal
    private val iceServers = listOf(
        PeerConnection.IceServer.builder("stun:stun.l.google.com:19302").createIceServer(),
        PeerConnection.IceServer.builder("stun:stun1.l.google.com:19302").createIceServer(),
        PeerConnection.IceServer.builder("stun:stun2.l.google.com:19302").createIceServer(),
        PeerConnection.IceServer.builder("turn:global.relay.metered.ca:80")
            .setUsername("83c6ad7d0639d8d9f8e7c7d9")
            .setPassword("3H7lN3jC8T0rK8bK")
            .createIceServer()
    )

    interface WebRTCListener {
        fun onCallInitiated(callId: String)
        fun onCallAccepted(callId: String)
        fun onCallRejected(callId: String)
        fun onCallEnded(callId: String)
        fun onCallFailed(callId: String, error: String)
        fun onIncomingCall(callId: String, fromUserId: String)
        fun onWebRTCConnected()
        fun onWebRTCDisconnected()
        fun onIceConnectionStateChanged(state: PeerConnection.IceConnectionState)
    }

    init {
        // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        Executors.newSingleThreadExecutor().execute {
            try {
                Log.d(TAG, "üîÑ Starting async WebRTC initialization...")
                initializeWebRTC()
                Log.d(TAG, "‚úÖ Async WebRTC initialization completed")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Async WebRTC initialization failed: ${e.message}")
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ MyApp —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ context —ç—Ç–æ MyApp
        if (context is MyApp) {
            myApp = context
        }
    }

    private fun initializeWebRTC() {
        try {
            // üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ WebRTC
            if (peerConnectionFactory != null) {
                Log.d(TAG, "‚úÖ WebRTC already initialized, reusing PeerConnectionFactory")
                return
            }
            
            Log.d(TAG, "üîÑ Initializing WebRTC...")
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PeerConnectionFactory
            try {
                PeerConnectionFactory.initialize(
                    PeerConnectionFactory.InitializationOptions.builder(context)
                        .createInitializationOptions()
                )
                Log.d(TAG, "‚úÖ PeerConnectionFactory.initialize() completed")
            } catch (e: IllegalStateException) {
                // WebRTC —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                Log.d(TAG, "‚ÑπÔ∏è WebRTC already initialized: ${e.message}")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå PeerConnectionFactory initialization error: ${e.message}")
                throw e
            }

            val audioDeviceModule = JavaAudioDeviceModule.builder(context)
                .createAudioDeviceModule()
            
            Log.d(TAG, "‚úÖ AudioDeviceModule created")

            peerConnectionFactory = PeerConnectionFactory.builder()
                .setAudioDeviceModule(audioDeviceModule)
                .createPeerConnectionFactory()
            
            Log.d(TAG, "‚úÖ PeerConnectionFactory created successfully")
            Log.d(TAG, "‚úÖ WebRTC initialized successfully")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå WebRTC initialization failed: ${e.message}")
            e.printStackTrace()
        }
    }
    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∏ –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å WebRTCClient:

    /**
     * –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –°–û –°–ü–ò–°–ö–û–ú –£–°–¢–†–û–ô–°–¢–í
     */

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
     */
    fun registerDevice(deviceId: String, callback: (List<String>?) -> Unit) {
        Executors.newSingleThreadExecutor().execute {
            try {
                val url = URL("$serverUrl/api/devices/register")
                val connection = url.openConnection() as HttpURLConnection
                connection.requestMethod = "POST"
                connection.setRequestProperty("Content-Type", "application/json")
                connection.doOutput = true

                val json = JSONObject().apply {
                    put("deviceId", deviceId)
                    put("userId", userId)
                }

                connection.outputStream.use { os ->
                    os.write(json.toString().toByteArray())
                }

                val responseCode = connection.responseCode
                if (responseCode == 200) {
                    val response = connection.inputStream.bufferedReader().use { it.readText() }
                    val jsonResponse = JSONObject(response)

                    if (jsonResponse.optBoolean("success", false)) {
                        val deviceList = mutableListOf<String>()
                        val devicesArray = jsonResponse.optJSONArray("deviceList")

                        devicesArray?.let { array ->
                            for (i in 0 until array.length()) {
                                deviceList.add(array.getString(i))
                            }
                        }

                        Log.d(TAG, "‚úÖ Device registered successfully. Total devices: ${deviceList.size}")
                        callback(deviceList)
                    } else {
                        Log.e(TAG, "‚ùå Failed to register device: ${jsonResponse.optString("error")}")
                        callback(null)
                    }
                } else {
                    Log.e(TAG, "‚ùå HTTP error registering device: $responseCode")
                    callback(null)
                }
                connection.disconnect()
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error registering device: ${e.message}")
                callback(null)
            }
        }
    }

    /**
     * –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
     * @param deviceId ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
     * @param callback Callback —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ (true = —É—Å–ø–µ—à–Ω–æ, false = –æ—à–∏–±–∫–∞)
     */
    fun unregisterDevice(deviceId: String, callback: ((Boolean) -> Unit)? = null) {
        Executors.newSingleThreadExecutor().execute {
            try {
                Log.d(TAG, "üì± Starting device unregistration: $deviceId")
                
                if (deviceId.isBlank()) {
                    Log.e(TAG, "‚ùå Device ID is empty, cannot unregister")
                    callback?.invoke(false)
                    return@execute
                }
                
                val url = URL("$serverUrl/api/devices/unregister")
                val connection = url.openConnection() as HttpURLConnection
                connection.requestMethod = "POST"
                connection.setRequestProperty("Content-Type", "application/json")
                connection.doOutput = true
                connection.connectTimeout = 5000 // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                connection.readTimeout = 5000

                val json = JSONObject().apply {
                    put("deviceId", deviceId)
                }
                
                Log.d(TAG, "üì± Sending unregister request for device: $deviceId")
                Log.d(TAG, "üì± Request JSON: ${json.toString()}")

                connection.outputStream.use { os ->
                    os.write(json.toString().toByteArray())
                }

                val responseCode = connection.responseCode
                Log.d(TAG, "üì± HTTP response code: $responseCode")
                
                if (responseCode == 200 || responseCode == 204) {
                    Log.d(TAG, "‚úÖ Device unregistered successfully from server: $deviceId")
                    callback?.invoke(true)
                } else {
                    Log.e(TAG, "‚ùå HTTP error unregistering device: $responseCode")
                    
                    // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    try {
                        val errorResponse = connection.errorStream?.bufferedReader()?.readText()
                        Log.e(TAG, "‚ùå Server error response: $errorResponse")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Could not read error response: ${e.message}")
                    }
                    
                    callback?.invoke(false)
                }
                connection.disconnect()
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error unregistering device: ${e.message}")
                e.printStackTrace()
                callback?.invoke(false)
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    fun getDeviceList(callback: (List<String>?) -> Unit) {
        Executors.newSingleThreadExecutor().execute {
            try {
                val url = URL("$serverUrl/api/devices")
                val connection = url.openConnection() as HttpURLConnection
                connection.requestMethod = "GET"

                val responseCode = connection.responseCode
                if (responseCode == 200) {
                    val response = connection.inputStream.bufferedReader().use { it.readText() }
                    val jsonResponse = JSONObject(response)

                    if (jsonResponse.optBoolean("success", false)) {
                        val deviceList = mutableListOf<String>()
                        val devicesArray = jsonResponse.optJSONArray("deviceList")

                        devicesArray?.let { array ->
                            for (i in 0 until array.length()) {
                                deviceList.add(array.getString(i))
                            }
                        }

                        Log.d(TAG, "‚úÖ Retrieved device list. Total devices: ${deviceList.size}")
                        callback(deviceList)
                    } else {
                        Log.e(TAG, "‚ùå Failed to get device list: ${jsonResponse.optString("error")}")
                        callback(null)
                    }
                } else {
                    Log.e(TAG, "‚ùå HTTP error getting device list: $responseCode")
                    callback(null)
                }
                connection.disconnect()
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error getting device list: ${e.message}")
                callback(null)
            }
        }
    }


    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    fun getDeviceId(): String {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Android ID –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        return android.provider.Settings.Secure.getString(
            context.contentResolver,
            android.provider.Settings.Secure.ANDROID_ID
        ) ?: "device_${UUID.randomUUID()}"
    }
    /**
     * –ò–ù–ò–¶–ò–ê–¶–ò–Ø –ó–í–û–ù–ö–ê - –®–∞–≥ 1
     * –°–æ–∑–¥–∞–µ—Ç ActualCall –æ–±—ä–µ–∫—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ HTTP
     */
    fun initiateCall(targetUserId: String): String {
        val callId = generateCallId()
        this.targetUserId = targetUserId
        this.currentCallId = callId
        this.isCalling = true

        Log.d(TAG, "üìû Initiating call to: $targetUserId, callId: $callId")

        // –°–æ–∑–¥–∞–µ–º ActualCall –æ–±—ä–µ–∫—Ç
        val actualCall = ActualCall(
            callId = callId,
            callerId = userId,
            recipientId = targetUserId,
            status = "null",
            step = "request_call",
            createdAt = System.currentTimeMillis(),
            offerSdp = null,
            answerSdp = null
        )

        // –û–±–Ω–æ–≤–ª—è–µ–º ActualCall –≤ MyApp
        myApp?.setCurrentActualCall(actualCall)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ HTTP –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        sendCallViaHttp(actualCall)

        // üî• –ù–û–í–û–ï: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        prepareWebRTCConnectionAsync()

        listener.onCallInitiated(callId)
        return callId
    }

    /**
     * üî• –ù–û–í–û–ï: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     * –°–æ–∑–¥–∞–µ—Ç PeerConnection, –∞—É–¥–∏–æ —Ç—Ä–µ–∫ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç offer
     */
    private fun prepareWebRTCConnectionAsync() {
        Executors.newSingleThreadExecutor().execute {
            try {
                Log.d(TAG, "üöÄ Preparing WebRTC connection asynchronously...")
                
                // –°–æ–∑–¥–∞–µ–º PeerConnection
                if (!createPeerConnection()) {
                    Log.e(TAG, "‚ùå Failed to create PeerConnection during preparation")
                    return@execute
                }
                
                // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ç—Ä–µ–∫
                createLocalAudioTrack()
                
                // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
                connectWebSocket()
                
                // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º offer
                createAndPrepareOffer()
                
                Log.d(TAG, "‚úÖ WebRTC connection prepared successfully")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error preparing WebRTC connection: ${e.message}")
            }
        }
    }

    /**
     * –û–ë–†–ê–ë–û–¢–ö–ê –í–•–û–î–Ø–©–ï–ì–û –ó–í–û–ù–ö–ê - –®–∞–≥ 2
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º push —Å –æ–±—ä–µ–∫—Ç–æ–º ActualCall —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "offer"
     */
    fun handleIncomingCall(actualCall: ActualCall) {
        Log.d(TAG, "üì• Handling incoming call: ${actualCall.callId} from: ${actualCall.callerId}")

        this.targetUserId = actualCall.callerId
        this.currentCallId = actualCall.callId
        this.isIncomingCall = true

        // –û–±–Ω–æ–≤–ª—è–µ–º ActualCall –≤ MyApp
        myApp?.setCurrentActualCall(actualCall)

        listener.onIncomingCall(actualCall.callId, actualCall.callerId)
    }

    /**
     * –ü–†–ò–ù–Ø–¢–ò–ï –ó–í–û–ù–ö–ê - –®–∞–≥ 3
     * –û–±–Ω–æ–≤–ª—è–µ—Ç ActualCall –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "accepted"
     */
    fun acceptIncomingCall(callId: String) {
        if (currentCallId != callId) {
            Log.e(TAG, "‚ùå Call ID mismatch")
            return
        }

        Log.d(TAG, "‚úÖ Accepting incoming call: $callId")

        val updatedCall = ActualCall(
            callId = callId,
            callerId = targetUserId!!,
            recipientId = userId,
            status = "null",
            step = "accept_call",
            createdAt = System.currentTimeMillis(),
            offerSdp = null,
            answerSdp = null
        )

        // –û–±–Ω–æ–≤–ª—è–µ–º ActualCall –≤ MyApp
        myApp?.setCurrentActualCall(updatedCall)

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ HTTP
        updateCallViaHttp(updatedCall) { success ->
            if (success) {
                Log.d(TAG, "‚úÖ Call accepted on server")
                listener.onCallAccepted(callId)

                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º WebRTC –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
                prepareForIncomingCall()
            } else {
                Log.e(TAG, "‚ùå Failed to accept call on server")
                listener.onCallFailed(callId, "Failed to accept call")
            }
        }
    }

    /**
     * –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ó–í–û–ù–ö–ê - –®–∞–≥ 3 (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
     * –û–±–Ω–æ–≤–ª—è–µ—Ç ActualCall –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "rejected"
     */
    fun rejectIncomingCall(callId: String) {
        Log.d(TAG, "‚ùå Rejecting call: $callId")

        val updatedCall = ActualCall(
            callId = callId,
            callerId = targetUserId!!,
            recipientId = userId,
            status = "null",
            step = "reject_call",
            createdAt = System.currentTimeMillis(),
            offerSdp = null,
            answerSdp = null
        )

        // –û–±–Ω–æ–≤–ª—è–µ–º ActualCall –≤ MyApp
        myApp?.setCurrentActualCall(updatedCall)

        updateCallViaHttp(updatedCall) { success ->
            if (success) {
                Log.d(TAG, "‚úÖ Call rejected on server")
                listener.onCallRejected(callId)
                if (!isCleaningUp) {
                    cleanup()
                }
            } else {
                Log.e(TAG, "‚ùå Failed to reject call on server")
            }
        }
    }

    /**
     * –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ê–¢–£–°–ê –ó–í–û–ù–ö–ê - –®–∞–≥ 4
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º push —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º ActualCall
     */
    fun handleCallStatusUpdate(actualCall: ActualCall) {
        Log.d(TAG, "üîÑ Handling call status update: ${actualCall.status} for call: ${actualCall.callId}")

        // –û–±–Ω–æ–≤–ª—è–µ–º ActualCall –≤ MyApp
        myApp?.setCurrentActualCall(actualCall)

        when (actualCall.step) {
            "accept_call" -> {
                Log.d(TAG, "üéØ Call accepted by recipient, starting WebRTC connection")
                listener.onCallAccepted(actualCall.callId)

                // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π offer –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                if (preparedOffer != null) {
                    Log.d(TAG, "üöÄ Using prepared offer for fast connection")
                    sendOffer(preparedOffer!!)
                } else {
                    Log.d(TAG, "‚ö†Ô∏è No prepared offer, creating new connection")
                    initializeWebRTCConnection()
                }
            }
            "reject_call" -> {
                Log.d(TAG, "üö´ Call rejected by recipient")
                listener.onCallRejected(actualCall.callId)
                if (!isCleaningUp) {
                    cleanup()
                }
            }
            "end_call6" -> {
                Log.d(TAG, "üìû Call ended")
                listener.onCallEnded(actualCall.callId)
                if (!isCleaningUp) {
                    cleanup()
                }
            }
            else -> {
                Log.w(TAG, "‚ö†Ô∏è Unknown call status: ${actualCall.status}")
            }
        }
    }

    /**
     * –ü–û–î–ì–û–¢–û–í–ö–ê –ö –í–•–û–î–Ø–©–ï–ú–£ –ó–í–û–ù–ö–£ WebRTC
     */
    private fun prepareForIncomingCall() {
        Log.d(TAG, "üîß Preparing for incoming WebRTC call")

        // –°–æ–∑–¥–∞–µ–º PeerConnection
        createPeerConnection()

        // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ç—Ä–µ–∫
        createLocalAudioTrack()

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è –æ–±–º–µ–Ω–∞ SDP –∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏
        connectWebSocket()
    }

    /**
     * üî• –ù–û–í–û–ï: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ offer –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    private fun createAndPrepareOffer() {
        Log.d(TAG, "üì§ Creating and preparing WebRTC offer (not sending yet)")

        val constraints = MediaConstraints().apply {
            mandatory.add(MediaConstraints.KeyValuePair("OfferToReceiveAudio", "true"))
        }

        Log.d(TAG, "üì§ Calling createOffer...")
        peerConnection?.createOffer(object : SimpleSdpObserver() {
            override fun onCreateSuccess(desc: SessionDescription?) {
                Log.d(TAG, "‚úÖ Offer created and prepared successfully: ${desc?.type}")
                desc?.let {
                    Log.d(TAG, "üì§ Setting local description...")
                    peerConnection?.setLocalDescription(object : SimpleSdpObserver() {
                        override fun onSetSuccess() {
                            Log.d(TAG, "‚úÖ Local description set successfully")
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º offer –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                            preparedOffer = it
                            Log.d(TAG, "üíæ Offer prepared and ready for sending")
                        }
                        override fun onSetFailure(error: String?) {
                            Log.e(TAG, "‚ùå Failed to set local description: $error")
                        }
                    }, it)
                }
            }
            override fun onCreateFailure(error: String?) {
                Log.e(TAG, "‚ùå Failed to create offer: $error")
            }
        }, constraints)
    }

    /**
     * –ò–ù–ò–¶–ò–ê–¶–ò–Ø WebRTC –°–û–ï–î–ò–ù–ï–ù–ò–Ø - –®–∞–≥ 5
     */
    private fun initializeWebRTCConnection() {
        Log.d(TAG, "üåê Initializing WebRTC connection")

        // –°–æ–∑–¥–∞–µ–º PeerConnection
        if (!createPeerConnection()) {
            listener.onCallFailed(currentCallId!!, "Failed to create PeerConnection")
            return
        }

        // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ç—Ä–µ–∫
        createLocalAudioTrack()

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
        connectWebSocket()

        // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º offer
        createAndSendOffer()
    }

    /**
     * –ó–∞–ø—É—Å–∫ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è accept_call (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
     */
    fun startWebRTCConnection(actualCall: ActualCall) {
        Log.d(TAG, "üåê Starting WebRTC connection for call: ${actualCall.callId}")
        Log.d(TAG, "üåê Caller: ${actualCall.callerId}, Recipient: ${actualCall.recipientId}")
        Log.d(TAG, "üåê My userId: $userId")
        
        this.currentCallId = actualCall.callId
        this.targetUserId = actualCall.recipientId
        this.isCalling = true
        
        Log.d(TAG, "üåê Creating PeerConnection...")
        // –°–æ–∑–¥–∞–µ–º PeerConnection
        if (!createPeerConnection()) {
            Log.e(TAG, "‚ùå Failed to create PeerConnection")
            listener.onCallFailed(actualCall.callId, "Failed to create PeerConnection")
            return
        }
        
        Log.d(TAG, "üåê Creating local audio track...")
        // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ç—Ä–µ–∫
        createLocalAudioTrack()
        
        Log.d(TAG, "üåê Connecting to WebSocket...")
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞
        connectWebSocket()
        
        Log.d(TAG, "üåê Creating and sending offer...")
        // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º offer
        createAndSendOffer()
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è)
     */
    fun handleIncomingWebRTCConnection(actualCall: ActualCall) {
        Log.d(TAG, "üì• Handling incoming WebRTC connection: ${actualCall.callId}")
        Log.d(TAG, "üì• Caller: ${actualCall.callerId}, Recipient: ${actualCall.recipientId}")
        Log.d(TAG, "üì• My userId: $userId")
        
        this.currentCallId = actualCall.callId
        this.targetUserId = actualCall.callerId
        this.isIncomingCall = true
        
        Log.d(TAG, "üì• Creating PeerConnection...")
        // –°–æ–∑–¥–∞–µ–º PeerConnection
        if (!createPeerConnection()) {
            Log.e(TAG, "‚ùå Failed to create PeerConnection")
            listener.onCallFailed(actualCall.callId, "Failed to create PeerConnection")
            return
        }
        
        Log.d(TAG, "üì• Creating local audio track...")
        // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ç—Ä–µ–∫
        createLocalAudioTrack()
        
        Log.d(TAG, "üì• Connecting to WebSocket...")
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞
        connectWebSocket()
        
        // –ñ–¥–µ–º offer –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        Log.d(TAG, "‚è≥ Waiting for WebRTC offer from caller")
    }

    private fun createPeerConnection(): Boolean {
        return try {
            Log.d(TAG, "üîß Creating PeerConnection with ${iceServers.size} ICE servers")
            val rtcConfig = PeerConnection.RTCConfiguration(iceServers).apply {
                iceTransportsType = PeerConnection.IceTransportsType.ALL
                sdpSemantics = PeerConnection.SdpSemantics.UNIFIED_PLAN
                bundlePolicy = PeerConnection.BundlePolicy.MAXBUNDLE
                rtcpMuxPolicy = PeerConnection.RtcpMuxPolicy.REQUIRE
            }

            peerConnection = peerConnectionFactory?.createPeerConnection(
                rtcConfig,
                object : PeerConnection.Observer {
                    override fun onIceCandidate(candidate: IceCandidate) {
                        Log.d(TAG, "üßä New ICE candidate: ${candidate.sdp}")
                        sendIceCandidate(candidate)
                    }

                    override fun onIceConnectionChange(state: PeerConnection.IceConnectionState) {
                        Log.d(TAG, "üßä ICE connection state: $state")
                        listener.onIceConnectionStateChanged(state)

                        when (state) {
                            PeerConnection.IceConnectionState.CONNECTED -> {
                                Log.d(TAG, "‚úÖ WebRTC connection established - checking microphones")
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                                checkMicrophonesReady()
                            }
                            PeerConnection.IceConnectionState.DISCONNECTED,
                            PeerConnection.IceConnectionState.FAILED,
                            PeerConnection.IceConnectionState.CLOSED -> {
                                Log.w(TAG, "‚ùå WebRTC connection lost")
                                listener.onWebRTCDisconnected()
                                // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º cleanup
                                if (!isCleaningUp) {
                                    cleanup()
                                } else {
                                    Log.d(TAG, "‚ö†Ô∏è Cleanup already in progress, skipping duplicate call")
                                }
                            }
                            else -> {}
                        }
                    }

                    override fun onAddStream(stream: MediaStream) {
                        Log.d(TAG, "üìπ Remote stream added")
                        if (stream.audioTracks.isNotEmpty()) {
                            remoteAudioTrack = stream.audioTracks[0]
                            remoteAudioTrack?.setEnabled(true)
                            Log.d(TAG, "üéß Remote audio track enabled")
                            
                            // üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±–æ–∏—Ö –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤
                            checkMicrophonesReady()
                        }
                    }

                    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã Observer (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
                    override fun onSignalingChange(state: PeerConnection.SignalingState) {}
                    override fun onIceConnectionReceivingChange(receiving: Boolean) {}
                    override fun onIceGatheringChange(state: PeerConnection.IceGatheringState) {}
                    override fun onIceCandidatesRemoved(candidates: Array<out IceCandidate>) {}
                    override fun onRemoveStream(stream: MediaStream) {}
                    override fun onDataChannel(dataChannel: DataChannel) {}
                    override fun onRenegotiationNeeded() {}
                    override fun onAddTrack(rtpReceiver: RtpReceiver, mediaStreams: Array<out MediaStream>) {}
                    override fun onConnectionChange(newState: PeerConnection.PeerConnectionState) {}
                    override fun onSelectedCandidatePairChanged(event: CandidatePairChangeEvent) {}
                    override fun onTrack(transceiver: RtpTransceiver) {}
                    override fun onRemoveTrack(receiver: RtpReceiver) {}
                }
            )

            // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ç—Ä–µ–∫
            localAudioTrack?.let { track ->
                peerConnection?.addTrack(track, listOf("audio_stream"))
            }

            peerConnection != null
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error creating PeerConnection: ${e.message}")
            false
        }
    }

    private fun createLocalAudioTrack() {
        try {
            // üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ PeerConnectionFactory
            if (peerConnectionFactory == null) {
                Log.e(TAG, "‚ùå PeerConnectionFactory not ready yet, waiting...")
                // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                var attempts = 0
                while (peerConnectionFactory == null && attempts < 10) {
                    Thread.sleep(100)
                    attempts++
                }
                if (peerConnectionFactory == null) {
                    Log.e(TAG, "‚ùå PeerConnectionFactory initialization timeout")
                    return
                }
                Log.d(TAG, "‚úÖ PeerConnectionFactory ready after $attempts attempts")
            }
            
            Log.d(TAG, "üé§ Checking audio permissions...")
            if (!hasAudioPermissions()) {
                Log.e(TAG, "‚ùå No audio permissions - RECORD_AUDIO permission required")
                return
            }
            Log.d(TAG, "‚úÖ Audio permissions granted")

            val audioConstraints = MediaConstraints().apply {
                mandatory.add(MediaConstraints.KeyValuePair("googEchoCancellation", "true"))
                mandatory.add(MediaConstraints.KeyValuePair("googNoiseSuppression", "true"))
            }

            Log.d(TAG, "üé§ Creating audio source...")
            audioSource = peerConnectionFactory?.createAudioSource(audioConstraints)
            if (audioSource == null) {
                Log.e(TAG, "‚ùå Failed to create audio source")
                return
            }

            Log.d(TAG, "üé§ Creating audio track...")
            localAudioTrack = peerConnectionFactory?.createAudioTrack("audio_track_$userId", audioSource)
            if (localAudioTrack == null) {
                Log.e(TAG, "‚ùå Failed to create audio track")
                return
            }

            localAudioTrack?.setEnabled(true)
            Log.d(TAG, "‚úÖ Audio track enabled: ${localAudioTrack?.enabled()}")

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –∑–≤–æ–Ω–∫–∞
            audioManager.mode = AudioManager.MODE_IN_COMMUNICATION
            audioManager.isSpeakerphoneOn = false
            Log.d(TAG, "üîä Audio mode set to MODE_IN_COMMUNICATION")

            Log.d(TAG, "üé§ Local audio track created and enabled successfully")
            
            // üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
            checkMicrophonesReady()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error creating local audio track: ${e.message}")
            e.printStackTrace()
        }
    }

    /**
     * üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤
     */
    private fun checkMicrophonesReady() {
        val localReady = localAudioTrack?.enabled() == true
        val remoteReady = remoteAudioTrack?.enabled() == true
        
        Log.d(TAG, "üé§ Checking microphones readiness:")
        Log.d(TAG, "   - Local microphone: $localReady (track: ${localAudioTrack != null})")
        Log.d(TAG, "   - Remote microphone: $remoteReady (track: ${remoteAudioTrack != null})")
        Log.d(TAG, "   - PeerConnection state: ${peerConnection?.signalingState()}")
        Log.d(TAG, "   - ICE connection state: ${peerConnection?.iceConnectionState()}")
        
        // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∫–æ–≥–¥–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω –≥–æ—Ç–æ–≤ –ò –µ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
        // –ù–µ –∂–¥–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –ø–æ–∑–∂–µ
        if (localReady && remoteAudioTrack != null) {
            Log.d(TAG, "üé§ Local microphone ready and remote stream received - starting call timer")
            listener.onWebRTCConnected()
        } else if (localReady) {
            Log.d(TAG, "üé§ Local microphone ready, waiting for remote stream...")
        } else {
            Log.d(TAG, "‚è≥ Waiting for local microphone to be ready...")
        }
    }

    private fun createAndSendOffer() {
        Log.d(TAG, "üì§ Creating and sending WebRTC offer")
        Log.d(TAG, "üì§ PeerConnection state: ${peerConnection?.signalingState()}")
        Log.d(TAG, "üì§ Local audio track enabled: ${localAudioTrack?.enabled()}")

        val constraints = MediaConstraints().apply {
            mandatory.add(MediaConstraints.KeyValuePair("OfferToReceiveAudio", "true"))
        }

        Log.d(TAG, "üì§ Calling createOffer...")
        peerConnection?.createOffer(object : SimpleSdpObserver() {
            override fun onCreateSuccess(desc: SessionDescription?) {
                Log.d(TAG, "‚úÖ Offer created successfully: ${desc?.type}")
                Log.d(TAG, "üì§ Offer SDP length: ${desc?.description?.length ?: 0}")
                desc?.let {
                    Log.d(TAG, "üì§ Setting local description...")
                    peerConnection?.setLocalDescription(object : SimpleSdpObserver() {
                        override fun onSetSuccess() {
                            Log.d(TAG, "‚úÖ Local description set successfully")
                            sendOffer(it)
                        }
                        override fun onSetFailure(error: String?) {
                            Log.e(TAG, "‚ùå Failed to set local description: $error")
                        }
                    }, it)
                }
            }
            override fun onCreateFailure(error: String?) {
                Log.e(TAG, "‚ùå Failed to create offer: $error")
            }
        }, constraints)
    }

    /**
     * –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–õ–£–ß–ï–ù–ù–û–ì–û OFFER - –®–∞–≥ 6
     */
    fun handleOffer(offerSdp: String) {
        Log.d(TAG, "üì• Handling received offer")

        if (peerConnection == null) {
            Log.e(TAG, "‚ùå PeerConnection not initialized")
            return
        }

        val offer = SessionDescription(SessionDescription.Type.OFFER, offerSdp)

        peerConnection?.setRemoteDescription(object : SimpleSdpObserver() {
            override fun onSetSuccess() {
                Log.d(TAG, "‚úÖ Remote offer set successfully")
                createAndSendAnswer()
            }
            override fun onSetFailure(error: String?) {
                Log.e(TAG, "‚ùå Failed to set remote offer: $error")
            }
        }, offer)
    }

    private fun createAndSendAnswer() {
        Log.d(TAG, "üì§ Creating and sending WebRTC answer")

        val constraints = MediaConstraints().apply {
            mandatory.add(MediaConstraints.KeyValuePair("OfferToReceiveAudio", "true"))
        }

        peerConnection?.createAnswer(object : SimpleSdpObserver() {
            override fun onCreateSuccess(desc: SessionDescription?) {
                Log.d(TAG, "‚úÖ Answer created successfully")
                desc?.let {
                    peerConnection?.setLocalDescription(object : SimpleSdpObserver() {
                        override fun onSetSuccess() {
                            Log.d(TAG, "‚úÖ Local description set for answer")
                            sendAnswer(it)
                        }
                        override fun onSetFailure(error: String?) {
                            Log.e(TAG, "‚ùå Failed to set local description for answer: $error")
                        }
                    }, it)
                }
            }
            override fun onCreateFailure(error: String?) {
                Log.e(TAG, "‚ùå Failed to create answer: $error")
            }
        }, constraints)
    }

    /**
     * –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–õ–£–ß–ï–ù–ù–û–ì–û ANSWER - –®–∞–≥ 7
     */
    fun handleAnswer(answerSdp: String) {
        Log.d(TAG, "üì• Handling received answer")

        val answer = SessionDescription(SessionDescription.Type.ANSWER, answerSdp)

        peerConnection?.setRemoteDescription(object : SimpleSdpObserver() {
            override fun onSetSuccess() {
                Log.d(TAG, "‚úÖ Remote answer set successfully")
                // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞—á–∞ –∞—É–¥–∏–æ
            }
            override fun onSetFailure(error: String?) {
                Log.e(TAG, "‚ùå Failed to set remote answer: $error")
            }
        }, answer)
    }

    /**
     * –û–ë–†–ê–ë–û–¢–ö–ê ICE –ö–ê–ù–î–ò–î–ê–¢–û–í
     */
    fun handleIceCandidate(candidate: IceCandidate) {
        Log.d(TAG, "üßä Handling remote ICE candidate")
        peerConnection?.addIceCandidate(candidate)
    }

    /**
     * WebSocket –°–û–ï–î–ò–ù–ï–ù–ò–ï –î–õ–Ø WebRTC –°–ò–ì–ù–ê–õ–ò–ù–ì–ê
     */
    private fun connectWebSocket() {
        try {
            Log.d(TAG, "üîå Connecting to WebSocket: $serverUrl")
            val opts = IO.Options().apply {
                forceNew = true
                reconnection = true      // ‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                reconnectionAttempts = 5 // ‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                timeout = 5000
            }

            socket = IO.socket(serverUrl, opts)
            Log.d(TAG, "üîå WebSocket socket created")

            socket?.on(Socket.EVENT_CONNECT) {
                Log.d(TAG, "‚úÖ WebSocket connected for call: $currentCallId")
                registerWithWebSocket()
            }

            socket?.on(Socket.EVENT_DISCONNECT) {
                Log.d(TAG, "üì° WebSocket disconnected")
            }

            socket?.on(Socket.EVENT_CONNECT_ERROR) { args ->
                Log.e(TAG, "‚ùå WebSocket connection error: ${args.contentToString()}")
            }

//            socket?.on(Socket.EVENT_ERROR) { args ->
//                Log.e(TAG, "‚ùå WebSocket error: ${args.contentToString()}")
//            }

            socket?.on("webrtc_offer") { args ->
                val data = args[0] as? JSONObject
                data?.let {
                    val offerSdp = it.optString("sdp")
                    val callId = it.optString("callId")
                    val fromUserId = it.optString("fromUserId")
                    Log.d(TAG, "üì• Received WebRTC offer from: $fromUserId for call: $callId")
                    if (callId == currentCallId && offerSdp.isNotEmpty()) {
                        handleOffer(offerSdp)
                    }
                }
            }

            socket?.on("webrtc_answer") { args ->
                val data = args[0] as? JSONObject
                data?.let {
                    val answerSdp = it.optString("sdp")
                    val callId = it.optString("callId")
                    val fromUserId = it.optString("fromUserId")
                    Log.d(TAG, "üì• Received WebRTC answer from: $fromUserId for call: $callId")
                    if (callId == currentCallId && answerSdp.isNotEmpty()) {
                        handleAnswer(answerSdp)
                    }
                }
            }

            socket?.on("webrtc_ice_candidate") { args ->
                val data = args[0] as? JSONObject
                data?.let {
                    val candidateData = it.optJSONObject("candidate")
                    val callId = it.optString("callId")
                    val fromUserId = it.optString("fromUserId")
                    Log.d(TAG, "üßä Received ICE candidate from: $fromUserId for call: $callId")
                    if (callId == currentCallId && candidateData != null) {
                        val iceCandidate = IceCandidate(
                            candidateData.optString("sdpMid"),
                            candidateData.optInt("sdpMLineIndex"),
                            candidateData.optString("candidate")
                        )
                        handleIceCandidate(iceCandidate)
                    }
                }
            }

            socket?.connect()
            Log.d(TAG, "üîå Connecting WebSocket...")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå WebSocket connection error: ${e.message}")
        }
    }

    private fun registerWithWebSocket() {
        val data = JSONObject().apply {
            put("userId", userId)
            put("callId", currentCallId)
        }
        Log.d(TAG, "üë§ Registering with WebSocket: userId=$userId, callId=$currentCallId")
        socket?.emit("register", data)
        Log.d(TAG, "‚úÖ Registration sent to WebSocket")
    }

    private fun sendOffer(offer: SessionDescription) {
        val data = JSONObject().apply {
            put("sdp", offer.description)
            put("callId", currentCallId)
            put("toUserId", targetUserId)
        }
        socket?.emit("webrtc_offer", data)
        Log.d(TAG, "üì§ Sent WebRTC offer")
    }

    private fun sendAnswer(answer: SessionDescription) {
        val data = JSONObject().apply {
            put("sdp", answer.description)
            put("callId", currentCallId)
            put("toUserId", targetUserId)
        }
        socket?.emit("webrtc_answer", data)
        Log.d(TAG, "üì§ Sent WebRTC answer")
    }

    private fun sendIceCandidate(candidate: IceCandidate) {
        val candidateData = JSONObject().apply {
            put("sdpMid", candidate.sdpMid)
            put("sdpMLineIndex", candidate.sdpMLineIndex)
            put("candidate", candidate.sdp)
        }

        val data = JSONObject().apply {
            put("candidate", candidateData)
            put("callId", currentCallId)
            put("toUserId", targetUserId)
        }
        socket?.emit("webrtc_ice_candidate", data)
        Log.d(TAG, "üì§ Sent ICE candidate")
    }

    /**
     * HTTP –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° ACTUALCALL
     */
    private fun sendCallViaHttp(actualCall: ActualCall) {
        Executors.newSingleThreadExecutor().execute {
            try {
                val url = URL("$serverUrl/api/calls")
                val connection = url.openConnection() as HttpURLConnection
                connection.requestMethod = "POST"
                connection.setRequestProperty("Content-Type", "application/json")
                connection.doOutput = true

                val json = JSONObject().apply {
                    put("callId", actualCall.callId)
                    put("callerId", actualCall.callerId)
                    put("recipientId", actualCall.recipientId)
                    put("status", actualCall.status)
                    put("createdAt", actualCall.createdAt)
                }

                connection.outputStream.use { os ->
                    os.write(json.toString().toByteArray())
                }

                val responseCode = connection.responseCode
                if (responseCode == 200 || responseCode == 201) {
                    Log.d(TAG, "‚úÖ Call sent to server successfully")
                } else {
                    Log.e(TAG, "‚ùå Failed to send call, response: $responseCode")
                }
                connection.disconnect()
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå HTTP error sending call: ${e.message}")
            }
        }
    }

    private fun updateCallViaHttp(actualCall: ActualCall, callback: (Boolean) -> Unit) {
        Executors.newSingleThreadExecutor().execute {
            try {
                val url = URL("$serverUrl/api/calls/${actualCall.callId}")
                val connection = url.openConnection() as HttpURLConnection
                connection.requestMethod = "PUT"
                connection.setRequestProperty("Content-Type", "application/json")
                connection.doOutput = true

                val json = JSONObject().apply {
                    put("callId", actualCall.callId)
                    put("callerId", actualCall.callerId)
                    put("recipientId", actualCall.recipientId)
                    put("status", actualCall.status)
                    put("createdAt", actualCall.createdAt)
                }

                connection.outputStream.use { os ->
                    os.write(json.toString().toByteArray())
                }

                val responseCode = connection.responseCode
                if (responseCode == 200) {
                    Log.d(TAG, "‚úÖ Call updated on server successfully")
                    callback(true)
                } else {
                    Log.e(TAG, "‚ùå Failed to update call, response: $responseCode")
                    callback(false)
                }
                connection.disconnect()
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå HTTP error updating call: ${e.message}")
                callback(false)
            }
        }
    }

    /**
     * –ó–ê–í–ï–†–®–ï–ù–ò–ï –ó–í–û–ù–ö–ê
     */
    fun endCall() {
        Log.d(TAG, "üìû Ending call: $currentCallId")

        currentCallId?.let { callId ->
            val endedCall = ActualCall(
                callId = callId,
                callerId = userId,
                recipientId = targetUserId!!,
                status = "null",
                step = "end_call",
                createdAt = System.currentTimeMillis(),
                offerSdp = null,
                answerSdp = null
            )

            // –û–±–Ω–æ–≤–ª—è–µ–º ActualCall –≤ MyApp
            myApp?.setCurrentActualCall(endedCall)

            updateCallViaHttp(endedCall) { success ->
                if (success) {
                    listener.onCallEnded(callId)
                }
            }
        }

        cleanup()
    }

    private fun cleanup() {
        // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
        if (isCleaningUp) {
            Log.d(TAG, "‚ö†Ô∏è Cleanup already in progress, skipping recursive call")
            return
        }
        
        isCleaningUp = true
        Log.d(TAG, "üßπ Cleaning up WebRTC resources")

        try {
            // üî• –ù–û–í–û–ï: –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π currentActualCall
            actualCallChangeCallback?.let { callback ->
                myApp?.unsubscribeFromActualCallChanges(callback)
                actualCallChangeCallback = null
            }
            
            // üî• –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π offer
            preparedOffer = null
            
            // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π, –ø–æ—Ç–æ–º –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            socket?.off()
            socket?.disconnect()
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º PeerConnection —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–∫—Ä—ã—Ç
            peerConnection?.let { pc ->
                try {
                    if (pc.connectionState() != PeerConnection.PeerConnectionState.CLOSED) {
                        pc.close()
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Error closing peer connection: ${e.message}")
                }
                pc.dispose()
            }
            
            localAudioTrack?.dispose()
            audioSource?.dispose()

            peerConnection = null
            localAudioTrack = null
            audioSource = null
            socket = null

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∞—É–¥–∏–æ
            audioManager.mode = AudioManager.MODE_NORMAL

            currentCallId = null
            targetUserId = null
            isCalling = false
            isIncomingCall = false

            // –û—á–∏—â–∞–µ–º ActualCall –≤ MyApp
            myApp?.clearCurrentActualCall()

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error during cleanup: ${e.message}")
        } finally {
            // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ –∫–æ–Ω—Ü–µ
            isCleaningUp = false
            Log.d(TAG, "‚úÖ WebRTC cleanup completed")
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private fun generateCallId(): String {
        return "call_${System.currentTimeMillis()}_${UUID.randomUUID().toString().substring(0, 8)}"
    }

    private fun hasAudioPermissions(): Boolean {
        return ContextCompat.checkSelfPermission(
            context,
            Manifest.permission.RECORD_AUDIO
        ) == PackageManager.PERMISSION_GRANTED
    }

    fun toggleMute(): Boolean {
        return localAudioTrack?.let { track ->
            val newState = !track.enabled()
            track.setEnabled(newState)
            Log.d(TAG, if (newState) "üé§ Microphone enabled" else "üîá Microphone muted")
            newState
        } ?: false
    }

    fun toggleSpeaker(): Boolean {
        val newState = !audioManager.isSpeakerphoneOn
        audioManager.isSpeakerphoneOn = newState
        Log.d(TAG, "üîä Speakerphone: $newState")
        return newState
    }

    fun getCallState(): String = when {
        !isCalling && !isIncomingCall -> "IDLE"
        isIncomingCall -> "INCOMING"
        peerConnection == null -> "CONNECTING"
        else -> "CONNECTED"
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ MyApp (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ MyApp)
     */
    fun setMyApp(myApp: MyApp) {
        this.myApp = myApp
        
        // üî• –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π currentActualCall
        setupActualCallObserver()
    }
    
    /**
     * üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π currentActualCall
     */
    private fun setupActualCallObserver() {
        myApp?.let { app ->
            actualCallChangeCallback = { actualCall ->
                Log.d(TAG, "üìû ActualCall changed in WebRTCClient: ${actualCall?.callId}")
                
                // –ï—Å–ª–∏ currentActualCall –∏–∑–º–µ–Ω–∏–ª—Å—è (–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω), –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ–∫–∞–Ω–∞–ª
                if (actualCall == null || actualCall.callId != currentCallId) {
                    Log.d(TAG, "üõë ActualCall changed or cleared - interrupting audio channel")
                    
                    // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞—É–¥–∏–æ–∫–∞–Ω–∞–ª
                    interruptAudioChannel()
                } else {
                    Log.d(TAG, "üìû ActualCall updated but same callId - continuing")
                }
            }
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            app.subscribeToActualCallChanges(actualCallChangeCallback!!)
            Log.d(TAG, "‚úÖ ActualCall observer setup completed")
        }
    }
    
    /**
     * üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ–∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ currentActualCall
     */
    private fun interruptAudioChannel() {
        Log.d(TAG, "üõë Interrupting audio channel due to ActualCall change")
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏
        localAudioTrack?.setEnabled(false)
        remoteAudioTrack?.setEnabled(false)
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∞—É–¥–∏–æ
        audioManager.mode = AudioManager.MODE_NORMAL
        audioManager.isSpeakerphoneOn = false
        
        // –û—á–∏—â–∞–µ–º WebRTC —Ä–µ—Å—É—Ä—Å—ã
        cleanup()
        
        Log.d(TAG, "‚úÖ Audio channel interrupted successfully")
    }

    companion object {
        private const val TAG = "WebRTCClient"
    }
}

/**
 * –ú–û–î–ï–õ–¨ –î–ê–ù–ù–´–• ACTUALCALL
 */
data class ActualCall(
    val callId: String,
    val callerId: String,
    val recipientId: String,
    val step: String?,
    val status: String,
    val createdAt: Long,
    val offerSdp: String?,
    val answerSdp: String?
)

/**
 * –£–ü–†–û–©–ï–ù–ù–´–ô SDP OBSERVER
 */
open class SimpleSdpObserver : SdpObserver {
    override fun onCreateSuccess(desc: SessionDescription?) {
        Log.d("SimpleSdpObserver", "onCreateSuccess: ${desc?.type}")
    }
    override fun onSetSuccess() {
        Log.d("SimpleSdpObserver", "onSetSuccess")
    }
    override fun onCreateFailure(error: String?) {
        Log.e("SimpleSdpObserver", "onCreateFailure: $error")
    }
    override fun onSetFailure(error: String?) {
        Log.e("SimpleSdpObserver", "onSetFailure: $error")
    }
}