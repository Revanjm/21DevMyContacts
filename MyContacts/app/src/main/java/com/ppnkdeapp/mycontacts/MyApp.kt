package com.ppnkdeapp.mycontacts

//// CallManager –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
import android.app.Application
import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.content.ServiceConnection
import android.os.Build
import android.os.Handler
import android.os.IBinder
import android.os.Looper
import android.util.Log
import android.widget.Toast
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import com.ppnkdeapp.mycontacts.call.CallActivity
// CallManager –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
import com.ppnkdeapp.mycontacts.call.CallService
import com.ppnkdeapp.mycontacts.call.ConnectionService
import com.ppnkdeapp.mycontacts.call.SignalClient
import com.ppnkdeapp.mycontacts.call.WebRTCClient
import com.ppnkdeapp.mycontacts.call.ActualCall
import com.ppnkdeapp.mycontacts.network.NetworkManager
import com.tencent.mmkv.MMKV
import io.socket.client.IO
import io.socket.client.Socket
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import org.json.JSONObject
import org.webrtc.MediaStream
import com.google.firebase.messaging.FirebaseMessaging
import org.webrtc.PeerConnection
import java.io.File
import java.net.HttpURLConnection
import java.net.URL
import java.util.UUID
import java.util.concurrent.Executors
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleObserver
import androidx.lifecycle.OnLifecycleEvent
import androidx.lifecycle.ProcessLifecycleOwner

class MyApp : Application() {

    private lateinit var mmkv: MMKV
    private val contactsJsonPath = "/storage/emulated/0/MyContacts/contacts/contacts.json"
    private var connectionTimeoutHandler = Handler(Looper.getMainLooper())
    private val CONNECTION_TIMEOUT_DELAY = 10000L // 10 —Å–µ–∫—É–Ω–¥
    private var isConnectionTimeoutScheduled = false
    // CallManager –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - —É–¥–∞–ª–µ–Ω
    
    // HTTP –æ–ø—Ä–æ—Å –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
    private val incomingCallsPollingHandler = Handler(Looper.getMainLooper())
    private val INCOMING_CALLS_POLLING_INTERVAL = 5000L // 5 —Å–µ–∫—É–Ω–¥
    private var isIncomingCallsPollingActive = false
    private val processedIncomingCalls = mutableSetOf<String>() // –•—Ä–∞–Ω–∏–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ callId
    
    // HTTP –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
    private val callStatusPollingHandler = Handler(Looper.getMainLooper())
    private val CALL_STATUS_POLLING_INTERVAL = 2000L // 2 —Å–µ–∫—É–Ω–¥—ã
    private var isCallStatusPollingActive = false
    private var currentCallIdForStatusCheck: String? = null

    // –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–™–Ø–í–õ–ï–ù–ò–Ø:
    private val signalClient = SignalClient()
    private val connectionExecutor = Executors.newSingleThreadExecutor()
    private val serverConnectionCallbacks = mutableListOf<(ServerConnectionState) -> Unit>()
    private val mainHandler = Handler(Looper.getMainLooper())

    companion object {
        private const val SIGNALING_SERVER_URL = "https://e65ea583-8f5e-4d58-9f20-58e16b4d9ba5-00-182nvjnxjskc1.sisko.replit.dev"

        private const val CONTACTS_KEY = "contacts_data"
        private const val USER_ID_KEY = "user_id"
        private const val AUTH_TOKEN_KEY = "auth_token"
        private const val SERVER_CONNECTION_KEY = "server_connection_state"

        // –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ Activity
        fun getInstance(context: android.content.Context): MyApp {
            return context.applicationContext as MyApp
        }
    }

    // LiveData –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    private val _contactsLiveData = MutableLiveData<List<Contact>>()
    val contactsLiveData: LiveData<List<Contact>> get() = _contactsLiveData

    private val _myActiveContacts = MutableLiveData<List<Contact>>()
    val myActiveContacts: LiveData<List<Contact>> get() = _myActiveContacts

    // Callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    private val activeContactsChangeCallbacks = mutableListOf<(List<Contact>) -> Unit>()
    // LiveData –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
    private val _networkStateLiveData = MutableLiveData<Boolean>()
    val networkStateLiveData: LiveData<Boolean> get() = _networkStateLiveData

    // LiveData –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è WebRTC
    private val _webRTCInitializedLiveData = MutableLiveData<Boolean>()
    val webRTCInitializedLiveData: LiveData<Boolean> get() = _webRTCInitializedLiveData

    // LiveData –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    private val _serverConnectionState = MutableLiveData<ServerConnectionState>()
    val serverConnectionState: LiveData<ServerConnectionState> get() = _serverConnectionState

    // LiveData –¥–ª—è personal_id –∏–∑ root-–∫–æ–Ω—Ç–∞–∫—Ç–∞
    private val _personalId0 = MutableLiveData<String?>()
    val personalId0: LiveData<String?> get() = _personalId0

    // LiveData –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ActualCall
    private val _currentActualCall = MutableLiveData<ActualCall?>()
    val currentActualCall: LiveData<ActualCall?> get() = _currentActualCall

    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    private var isConnectedToServer = false
    private var socket: Socket? = null
    private var connectionRetryCount = 0
    private val _rootContactId = MutableLiveData<String?>()
    val rootContactId: LiveData<String?> get() = _rootContactId
    // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
    private lateinit var networkManager: NetworkManager
    private var connectionService: ConnectionService? = null
    private var isServiceBound = false
    
    // ServiceConnection –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ ConnectionService
    private val serviceConnection = object : ServiceConnection {
        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {
            val binder = service as ConnectionService.ConnectionServiceBinder
            connectionService = binder.getService()
            isServiceBound = true
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback'—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            registerConnectionServiceCallbacks()
            
            Log.d("MyApp", "‚úÖ ConnectionService bound successfully")
        }
        
        override fun onServiceDisconnected(name: ComponentName?) {
            unregisterConnectionServiceCallbacks()
            connectionService = null
            isServiceBound = false
            Log.d("MyApp", "‚ùå ConnectionService unbound")
        }
    }

    // Callback –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
    private val contactsChangeCallbacks = mutableListOf<(List<Contact>) -> Unit>()
    private val serverConnectionChangeCallbacks = mutableListOf<(ServerConnectionState) -> Unit>()
    private val personalIdChangeCallbacks = mutableListOf<(String?) -> Unit>()
    private val _activeConnectionsIds = MutableLiveData<List<String>>()
    val activeConnectionsIds: LiveData<List<String>> get() = _activeConnectionsIds

    // Callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö ID
    private val activeConnectionsChangeCallbacks = mutableListOf<(List<String>) -> Unit>()

    // Callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π ActualCall
    private val actualCallChangeCallbacks = mutableListOf<(ActualCall?) -> Unit>()

    sealed class ServerConnectionState {
        object Disconnected : ServerConnectionState()
        object Connecting : ServerConnectionState()
        object Connected : ServerConnectionState()
        data class Error(val message: String) : ServerConnectionState()
    }

    private lateinit var webRTCClient: WebRTCClient
    private var isWebRTCInitialized = false
    private var deviceId: String = ""

    // WebRTCListener –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    // –í –∫–ª–∞—Å—Å MyApp –¥–æ–±–∞–≤—å—Ç–µ:

    private var currentCallActivity: CallActivity? = null
    private var pendingIncomingCall: Pair<String, String>? = null // callerId, callId
    private val handledCallIds = mutableSetOf<String>() // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    
    fun handleIncomingCall(fromUserId: String, callId: String) {
        Log.d("MyApp", "üìû Handling incoming call from: $fromUserId, callId: $callId")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –∑–≤–æ–Ω–æ–∫
        if (handledCallIds.contains(callId)) {
            Log.w("MyApp", "‚ö†Ô∏è Call $callId already being handled, ignoring duplicate")
            return
        }
        
        handledCallIds.add(callId)
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä Set (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–≤–æ–Ω–∫–æ–≤)
        if (handledCallIds.size > 100) {
            val oldestCallId = handledCallIds.first()
            handledCallIds.remove(oldestCallId)
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
//        Log.d("MyApp", "üìû Processing incoming call using existing connection...")
//                processIncomingCallAfterReconnect(fromUserId, callId)
    }



    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ CallActivity)
    fun endCall(callId: String?, callerId: String?) {
        Log.d("MyApp", "üìû Ending call: $callId")

        // –£–¥–∞–ª—è–µ–º callId –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —ç—Ç–æ—Ç –∑–≤–æ–Ω–æ–∫ —Å–Ω–æ–≤–∞)
        callId?.let { handledCallIds.remove(it) }
        Log.d("MyApp", "üßπ Removed callId from handledCallIds cache")
        
        // –û—á–∏—â–∞–µ–º ActualCall –≤ MyApp
        clearCurrentActualCall()
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
        stopCallService()

        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞
        clearCallData()

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Å–µ—Å—Å–∏—é WebRTC
//        if (isWebRTCInitialized) {
//            try {
//                webRTCClient.stopAudioSession()
//            } catch (e: Exception) {
//                Log.e("MyApp", "Error stopping audio session: ${e.message}")
//            }
//        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ CallActivity)
    fun acceptCall(callerId: String, callId: String) {
        Log.d("MyApp", "üìû Accepting call from: $callerId")

        if (isWebRTCInitialized) {
            webRTCClient.acceptIncomingCall(callId)
            // –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
            startCallService(callId, callerId, false)
        }
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
//    fun handleIncomingCall(fromUserId: String, callId: String) {
//        Log.d("MyApp", "üìû Handling incoming call from: $fromUserId, callId: $callId")
//
//        mainHandler.post {
//            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
//            pendingIncomingCall = Pair(fromUserId, callId)
//
//            // –ó–∞–ø—É—Å–∫–∞–µ–º CallActivity
//            val intent = Intent(this, com.ppnkdeapp.mycontacts.call.CallActivity::class.java).apply {
//                flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
//                putExtra("call_id", callId)
//                putExtra("caller_id", fromUserId)
//                putExtra("is_incoming", true)
//
//                // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
//                val contactName = getContactName(fromUserId)
//                putExtra("contact_name", contactName)
//            }
//
//            startActivity(intent)
//            Log.d("MyApp", "‚úÖ CallActivity started for incoming call")
//        }
//    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    fun getContactName(userId: String?): String {
        if (userId.isNullOrEmpty()) return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        val contacts = _contactsLiveData.value ?: emptyList()
        val contact = contacts.find { it.personal_id == userId }
        return contact?.Name ?: "–ö–æ–Ω—Ç–∞–∫—Ç—É"
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–π CallActivity
    fun setCurrentCallActivity(activity: CallActivity?) {
        currentCallActivity = activity

        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –∑–≤–æ–Ω–æ–∫ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if (activity != null && pendingIncomingCall != null) {
            val (callerId, callId) = pendingIncomingCall!!
            pendingIncomingCall = null
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–≤–æ–Ω–∫–µ
// –û–±–Ω–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞
    fun clearCallData() {
        pendingIncomingCall = null
        currentCallActivity = null
        stopCallService() // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        stopCallStatusPolling() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
//    fun initiateOutgoingCall(targetUserId: String, contactName: String) {
//        mainHandler.post {
//            val callId = "call_${System.currentTimeMillis()}"
//
//            val intent = Intent(this, com.ppnkdeapp.mycontacts.call.CallActivity::class.java).apply {
//                flags = Intent.FLAG_ACTIVITY_NEW_TASK
//                putExtra("call_id", callId)
//                putExtra("caller_id", targetUserId)
//                putExtra("is_incoming", false)
//                putExtra("contact_name", contactName)
//            }
//
//            startActivity(intent)
//            Log.d("MyApp", "‚úÖ CallActivity started for outgoing call to: $targetUserId")
//        }
//    }
    // –ó–∞–º–µ–Ω–∏—Ç–µ –≤–µ—Å—å webRTCListener –Ω–∞:
    private val webRTCListener = object : WebRTCClient.WebRTCListener {
        private val activityListeners = mutableListOf<WebRTCClient.WebRTCListener>()

        fun addActivityListener(listener: WebRTCClient.WebRTCListener) {
            if (!activityListeners.contains(listener)) {
                activityListeners.add(listener)
            }
        }

        fun removeActivityListener(listener: WebRTCClient.WebRTCListener) {
            activityListeners.remove(listener)
        }

        private fun notifyAllActivityListeners(block: (WebRTCClient.WebRTCListener) -> Unit) {
            mainHandler.post {
                activityListeners.forEach { listener ->
                    try {
                        block(listener)
                    } catch (e: Exception) {
                        Log.e("MyApp", "Error notifying activity listener: ${e.message}")
                    }
                }
            }
        }

        override fun onIncomingCall(callId: String, fromUserId: String) {

            // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –ó–≤–æ–Ω–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ HTTP
            // handleIncomingCall(fromUserId, callId)
            Log.d("WebRTC", "‚ö†Ô∏è Socket.IO incoming call handling DISABLED - using HTTP only")
        }
//        override fun onIncomingCall(fromUserId: String, callId: String) {
//            Log.d("MyApp", "üìû Incoming call in MyApp: $fromUserId, callId: $callId")
//
//            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ MyApp
//            handleIncomingCall(fromUserId, callId)
//
//            // –£–≤–µ–¥–æ–º–ª—è–µ–º activity listeners
//            notifyAllActivityListeners { it.onIncomingCall(fromUserId, callId) }
//        }
////        override fun onIncomingCall(fromUserId: String, callId: String) {
////            Log.d("MyApp", "üìû Incoming call in MyApp: $fromUserId, callId: $callId")
////            notifyAllActivityListeners { it.onIncomingCall(fromUserId, callId) }
////        }

        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–∑ WebRTCClient.WebRTCListener
        override fun onCallInitiated(callId: String) {
            notifyAllActivityListeners { it.onCallInitiated(callId) }
        }

        override fun onCallAccepted(callId: String) {
            Log.d("MyApp", "‚úÖ Call accepted: $callId")
            notifyAllActivityListeners { it.onCallAccepted(callId) }
        }

        override fun onCallRejected(callId: String) {
            Log.d("MyApp", "‚ùå Call rejected: $callId")

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
            stopCallStatusPolling()

            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞
            clearCallData()

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
            stopCallService()

            notifyAllActivityListeners { it.onCallRejected(callId) }
        }

        override fun onCallEnded(callId: String) {
            Log.d("MyApp", "üìû Call ended: $callId")

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
            mainHandler.post {
                stopCallService()
                clearCallData()
            }

            notifyAllActivityListeners { it.onCallEnded(callId) }
        }

        override fun onCallFailed(callId: String, error: String) {
            Log.d("MyApp", "üìû Call failed: $callId - $error")

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–≤–æ–Ω–∫–∞
            mainHandler.post {
                stopCallService()
                clearCallData()
            }

            notifyAllActivityListeners { it.onCallFailed(callId, error) }
        }

        override fun onWebRTCConnected() {
            notifyAllActivityListeners { it.onWebRTCConnected() }
        }

        override fun onWebRTCDisconnected() {
            notifyAllActivityListeners { it.onWebRTCDisconnected() }
        }

        override fun onIceConnectionStateChanged(state: PeerConnection.IceConnectionState) {
            notifyAllActivityListeners { it.onIceConnectionStateChanged(state) }
        }
    }
    override fun onCreate() {
        super.onCreate()
        initializeMMKV()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        ensureContactsDirectoryExists()

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        _contactsLiveData.value = emptyList()
        _networkStateLiveData.value = false
        _webRTCInitializedLiveData.value = false
        _serverConnectionState.value = ServerConnectionState.Disconnected
        _personalId0.value = null
        _activeConnectionsIds.value = emptyList()
        _currentActualCall.value = null

        // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        loadContactsFromStorage()
        // CallManager –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        
        // üî• –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ ConnectionService –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        // –° –Ω–µ–±–æ–ª—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã —É—Å–ø–µ–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
        // üî• –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Cloud Messaging
//        initializeFirebaseMessaging()

        // üî• –ù–û–í–û–ï: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ProcessLifecycleOwner –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        registerProcessLifecycleObserver()
        
        // ‚ùå –£–ë–†–ê–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ ConnectionService –∏–∑ MyApp
        // –¢–µ–ø–µ—Ä—å ConnectionService –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ ContactsListActivity.onCreate()
        // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ ForegroundServiceStartNotAllowedException –≤ Android 12+
//        Log.d("MyApp", "‚ÑπÔ∏è ConnectionService will be started from ContactsListActivity")
        
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    private fun getDeviceIdentifier(): String {
        return android.provider.Settings.Secure.getString(
            contentResolver,
            android.provider.Settings.Secure.ANDROID_ID
        ) ?: "android_${System.currentTimeMillis()}"
    }

    private fun ensureContactsDirectoryExists() {
        try {
            val contactsDir = File("/storage/emulated/0/MyContacts/contacts")
            if (!contactsDir.exists()) {
                val created = contactsDir.mkdirs()
                if (created) {
                    Log.d("MyApp", "‚úÖ –ü–∞–ø–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: ${contactsDir.absolutePath}")

                    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª contacts.json
                    val contactsFile = File(contactsDir, "contacts.json")
                    val uniqueId = generateUniqueId()
                    val contactsJson = """
                {
                   "contacts": [
                      {
                         "Name": "No name",
                         "email": "No email",
                         "personal_id": "$uniqueId",
                         "group_id": 1,
                         "root_contact": true,
                         "list_id": 0
                      }
                   ]
                }
                """.trimIndent()

                    contactsFile.writeText(contactsJson)
                    Log.d("MyApp", "‚úÖ –§–∞–π–ª contacts.json —Å–æ–∑–¥–∞–Ω —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID: $uniqueId")

                } else {
                    Log.e("MyApp", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
                }
            }
        } catch (e: Exception) {
            Log.e("MyApp", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${e.message}")
        }
    }

    private fun generateUniqueId(): String {
        val allowedChars = ('A'..'Z') + ('a'..'z') + ('0'..'9')
        return (1..34)
            .map { allowedChars.random() }
            .joinToString("")
    }
//    override fun onCreate() {
//        super.onCreate()
//        initializeMMKV()
//
//        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
//        _contactsLiveData.value = emptyList()
//        _networkStateLiveData.value = false
//        _webRTCInitializedLiveData.value = false
//        _serverConnectionState.value = ServerConnectionState.Disconnected
//        _personalId0.value = null
//        _activeConnectionsIds.value = emptyList() // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
//
//        // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
//        loadContactsFromStorage()
//        // CallManager –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
//
//        // –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
//    }

    private fun initializeMMKV() {
        try {
            MMKV.initialize(this)
            mmkv = MMKV.defaultMMKV()
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    private fun fetchActiveConnectionsFromServer() {
        connectionExecutor.execute {
            try {
                val url = URL("$SIGNALING_SERVER_URL/status")
                val connection = url.openConnection() as HttpURLConnection
                connection.requestMethod = "GET"
                connection.connectTimeout = 1000
                connection.readTimeout = 10000

                if (connection.responseCode == HttpURLConnection.HTTP_OK) {
                    val response = connection.inputStream.bufferedReader().use { it.readText() }
                    val jsonObject = JSONObject(response)
                    val usersArray = jsonObject.getJSONArray("connectedUsers")

                    val usersList = mutableListOf<String>()
                    for (i in 0 until usersArray.length()) {
                        usersList.add(usersArray.getString(i))
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º LiveData –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    updateActiveConnections(usersList)
//                    Log.d("MyApp", "‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö ID: ${usersList.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                } else {
//                    Log.e("MyApp", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö: ${connection.responseCode}")
                }
            } catch (e: Exception) {
                e.printStackTrace()
//                Log.e("MyApp", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö: ${e.message}")
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
                updateActiveConnections(emptyList())
            }
        }
    }

    // –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
    private fun startCallStatusPolling(callId: String) {
        if (isCallStatusPollingActive) {
            return
        }
        
        currentCallIdForStatusCheck = callId
        isCallStatusPollingActive = true
        
        val statusCheckRunnable = object : Runnable {
            override fun run() {
                if (isCallStatusPollingActive && currentCallIdForStatusCheck != null) {
                    checkCallStatus(currentCallIdForStatusCheck!!)
                    callStatusPollingHandler.postDelayed(this, CALL_STATUS_POLLING_INTERVAL)
                }
            }
        }
        
        callStatusPollingHandler.post(statusCheckRunnable)
        Log.d("MyApp", "‚úÖ Started call status polling for callId: $callId")
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
    private fun stopCallStatusPolling() {
        isCallStatusPollingActive = false
        currentCallIdForStatusCheck = null
        callStatusPollingHandler.removeCallbacksAndMessages(null)
        Log.d("MyApp", "üõë Stopped call status polling")
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ HTTP
    private fun checkCallStatus(callId: String) {
        connectionExecutor.execute {
            try {
                val url = URL("$SIGNALING_SERVER_URL/call-status/$callId")
                val connection = url.openConnection() as HttpURLConnection
                connection.requestMethod = "GET"
                connection.connectTimeout = 1000
                connection.readTimeout = 5000

                if (connection.responseCode == HttpURLConnection.HTTP_OK) {
                    val response = connection.inputStream.bufferedReader().use { it.readText() }
                    val jsonObject = JSONObject(response)
                    
                    val currentStatus = jsonObject.optString("currentStatus", "")
                    val isActive = jsonObject.optBoolean("isActive", true)
                    
                    Log.d("MyApp", "üìû Call status check: callId=$callId, status=$currentStatus, isActive=$isActive")
                    
                    // –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    if (currentStatus == "rejected" || currentStatus == "ended" || !isActive) {
                        mainHandler.post {
                            Log.d("MyApp", "‚ùå Call was rejected or ended, cleaning up...")
                            stopCallStatusPolling() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å
                            clearCallData()
                            // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º WebRTC —Ä–µ—Å—É—Ä—Å—ã
                            if (isWebRTCInitialized()) {
                                webRTCClient.endCall()
                            }
                        }
                    }
                }
            } catch (e: Exception) {
                Log.e("MyApp", "‚ùå Error checking call status: ${e.message}")
            }
        }
    }

    // HTTP –æ–ø—Ä–æ—Å –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å Socket.IO)
    private fun fetchIncomingCallsFromServer() {
        val personalId = getPersonalId0()
        if (personalId.isNullOrBlank()) {
            return
        }

        connectionExecutor.execute {
            try {
                val url = URL("$SIGNALING_SERVER_URL/incoming-calls/$personalId")
                val connection = url.openConnection() as HttpURLConnection
                connection.requestMethod = "GET"
                connection.connectTimeout = 2000
                connection.readTimeout = 5000

                if (connection.responseCode == HttpURLConnection.HTTP_OK) {
                    val response = connection.inputStream.bufferedReader().use { it.readText() }
                    val jsonObject = JSONObject(response)
                    
                    if (jsonObject.getString("status") == "Success") {
                        val incomingCallsArray = jsonObject.getJSONArray("incomingCalls")
                        
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
                        for (i in 0 until incomingCallsArray.length()) {
                            val callData = incomingCallsArray.getJSONObject(i)
                            val callId = callData.getString("callId")
                            val callerId = callData.getString("callerId")
                            val contactName = callData.optString("contactName", "")
                            val status = callData.optString("status", "")
                            val createdAt = callData.optString("createdAt", "")
                            val isOfflineCall = callData.optBoolean("isOfflineCall", false)
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –∑–≤–æ–Ω–æ–∫
                            if (!processedIncomingCalls.contains(callId)) {
                                processedIncomingCalls.add(callId)
                                
                                val callInfo = buildString {
                                    append("üìû HTTP: New incoming call detected\n")
                                    append("   From: $callerId")
                                    if (contactName.isNotEmpty()) append(" ($contactName)")
                                    append("\n")
                                    append("   CallId: $callId\n")
                                    append("   Status: $status")
                                    if (isOfflineCall) append(" (OFFLINE)")
                                    append("\n")
                                    if (createdAt.isNotEmpty()) append("   Created: $createdAt")
                                }
                                Log.d("MyApp", callInfo)
                                
                                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ö–∞–Ω–∏–∑–º MyApp
                                mainHandler.post {
                                    try {
                                        Log.d("MyApp", "üìû HTTP: Processing incoming call from $callerId")
                                        handleIncomingCall(callerId, callId)
                                    } catch (e: Exception) {
                                        Log.e("MyApp", "‚ùå Error processing HTTP incoming call: ${e.message}")
                                    }
                                }
                            }
                        }
                    }
                }
            } catch (e: Exception) {
                Log.e("MyApp", "‚ùå Error fetching incoming calls via HTTP: ${e.message}")
            }
        }
    }

    // Runnable –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞
    private val incomingCallsPollingRunnable = object : Runnable {
        override fun run() {
            if (isIncomingCallsPollingActive && isConnectedToServer) {
                fetchIncomingCallsFromServer()
                incomingCallsPollingHandler.postDelayed(this, INCOMING_CALLS_POLLING_INTERVAL)
            }
        }
    }

    // –ó–∞–ø—É—Å–∫ HTTP –æ–ø—Ä–æ—Å–∞
    private fun startIncomingCallsPolling() {
        if (!isIncomingCallsPollingActive) {
            isIncomingCallsPollingActive = true
            Log.d("MyApp", "üîÑ Starting HTTP polling for incoming calls")
            incomingCallsPollingHandler.post(incomingCallsPollingRunnable)
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP –æ–ø—Ä–æ—Å–∞
    private fun stopIncomingCallsPolling() {
        if (isIncomingCallsPollingActive) {
            isIncomingCallsPollingActive = false
            Log.d("MyApp", "‚èπÔ∏è Stopping HTTP polling for incoming calls")
            incomingCallsPollingHandler.removeCallbacks(incomingCallsPollingRunnable)
            
            // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä Set (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
            processedIncomingCalls.clear()
            Log.d("MyApp", "üßπ Cleared processed incoming calls cache")
        }
    }

    fun getWebRTCClient(): WebRTCClient {
        if (!isWebRTCInitialized) {
            throw IllegalStateException("WebRTCClient not initialized")
        }
        return webRTCClient
    }

    fun isWebRTCInitialized(): Boolean = isWebRTCInitialized

    // –î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è WebRTC (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    private val webRTCEventCallbacks = mutableListOf<(String, Any?) -> Unit>()

    fun subscribeToWebRTCEvents(callback: (String, Any?) -> Unit) {
        webRTCEventCallbacks.add(callback)
    }

    fun unsubscribeFromWebRTCEvents(callback: (String, Any?) -> Unit) {
        webRTCEventCallbacks.remove(callback)
    }
    fun startCallService(callId: String, callerId: String, isIncoming: Boolean) {
        val intent = Intent(this, CallService::class.java).apply {
            action = if (isIncoming) "INCOMING_CALL" else "OUTGOING_CALL"
            putExtra("call_id", callId)
            putExtra("caller_id", callerId)
            putExtra("is_incoming", isIncoming)
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            val contactName = getContactName(callerId)
            if (isIncoming) {
                putExtra("caller_name", contactName)
            } else {
                putExtra("target_name", contactName)
                putExtra("target_user_id", callerId)
            }
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            startForegroundService(intent)
        } else {
            startService(intent)
        }

        Log.d("MyApp", "üìû CallService started for ${if (isIncoming) "incoming" else "outgoing"} call")
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –∑–≤–æ–Ω–∫–∞
    fun stopCallService() {
        val intent = Intent(this, CallService::class.java)
        stopService(intent)
        Log.d("MyApp", "üìû CallService stopped")
    }
    private val rootContactIdChangeCallbacks = mutableListOf<(String?) -> Unit>()

    fun subscribeToRootContactIdChanges(callback: (String?) -> Unit) {
        rootContactIdChangeCallbacks.add(callback)
        callback(_rootContactId.value)
    }

    fun unsubscribeFromRootContactIdChanges(callback: (String?) -> Unit) {
        rootContactIdChangeCallbacks.remove(callback)
    }

    private fun notifyRootContactIdChanged(rootContactId: String?) {
        rootContactIdChangeCallbacks.forEach { callback ->
            try {
                callback(rootContactId)
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    // CallManager –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - —É–¥–∞–ª–µ–Ω

    private fun updateActiveContacts(activeConnectionIds: List<String>) {
        val currentContacts = _contactsLiveData.value ?: emptyList()

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, —á—å–∏ personal_id –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        // –ò –∏—Å–∫–ª—é—á–∞–µ–º root-–∫–æ–Ω—Ç–∞–∫—Ç
        val activeContacts = currentContacts.filter { contact ->
            contact.personal_id != null &&
                    activeConnectionIds.contains(contact.personal_id) &&
                    contact.root_contact != true
        }

        mainHandler.post {
            _myActiveContacts.value = activeContacts
            notifyActiveContactsChanged(activeContacts)

            // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (activeContacts.isNotEmpty()) {
//                Log.d("MyApp", "üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã: ${activeContacts.size} —à—Ç.")
                activeContacts.forEach { contact ->
//                    Log.d("MyApp", "   üë§ ${contact.Name} (ID: ${contact.personal_id})")
                }
            } else {
//                Log.d("MyApp", "üéØ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            }
        }
    }

    private fun notifyActiveContactsChanged(activeContacts: List<Contact>) {
        activeContactsChangeCallbacks.forEach { callback ->
            try {
                callback(activeContacts)
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    fun subscribeToActiveContactsChanges(callback: (List<Contact>) -> Unit) {
        activeContactsChangeCallbacks.add(callback)
        // Immediately call with current value
        callback(_myActiveContacts.value ?: emptyList())
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    fun unsubscribeFromActiveContactsChanges(callback: (List<Contact>) -> Unit) {
        activeContactsChangeCallbacks.remove(callback)
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    fun getCurrentActiveContacts(): List<Contact> {
        return _myActiveContacts.value ?: emptyList()
    }

    // üî• –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø FCM
    fun registerFCMToken(token: String) {
        Log.d("MyApp", "üîë Registering FCM token: $token")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        connectionExecutor.execute {
            try {
                val url = URL("$SIGNALING_SERVER_URL/api/push/subscribe")
                val connection = url.openConnection() as HttpURLConnection
                connection.requestMethod = "POST"
                connection.setRequestProperty("Content-Type", "application/json")
                connection.doOutput = true

                val json = JSONObject().apply {
                    put("userId", getPersonalId0())
                    put("subscription", JSONObject().apply {
                        put("endpoint", "https://fcm.googleapis.com/fcm/send/$token")
                        put("keys", JSONObject().apply {
                            put("p256dh", "dummy_p256dh_key")
                            put("auth", "dummy_auth_key")
                        })
                    })
                }

                connection.outputStream.use { os ->
                    os.write(json.toString().toByteArray())
                }

                val responseCode = connection.responseCode
                if (responseCode == 200 || responseCode == 201) {
                    Log.d("MyApp", "‚úÖ FCM token registered successfully")
                } else {
                    Log.e("MyApp", "‚ùå Failed to register FCM token: $responseCode")
                }
                connection.disconnect()
            } catch (e: Exception) {
                Log.e("MyApp", "‚ùå Error registering FCM token: ${e.message}")
            }
        }
    }

    fun handleCallStatusUpdate(callId: String, status: String) {
        Log.d("MyApp", "üîÑ Handling call status update: $callId -> $status")
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
        when (status) {
            "accepted" -> {
                Log.d("MyApp", "‚úÖ Call accepted: $callId")
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
            }
            "rejected" -> {
                Log.d("MyApp", "‚ùå Call rejected: $callId")
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
            }
            "ended" -> {
                Log.d("MyApp", "üìû Call ended: $callId")
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
            }
        }
    }

    // üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Cloud Messaging
//    private fun initializeFirebaseMessaging() {
//        try {
//            Log.d("MyApp", "üî• Initializing Firebase Cloud Messaging...")
//
//            // –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω
//            FirebaseMessaging.getInstance().token.addOnCompleteListener { task ->
//                if (task.isSuccessful) {
//                    val token = task.result
//                    Log.d("MyApp", "üîë FCM token obtained: $token")
//
//                    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
//                    registerFCMToken(token)
//                } else {
//                    Log.e("MyApp", "‚ùå Failed to get FCM token: ${task.exception?.message}")
//                }
//            }
//
//            Log.d("MyApp", "‚úÖ Firebase Cloud Messaging initialized")
//        } catch (e: Exception) {
//            Log.e("MyApp", "‚ùå Error initializing Firebase Messaging: ${e.message}")
//        }
//    }

    fun updateActiveConnections(connections: List<String>) {
        mainHandler.post {
            val previousConnections = _activeConnectionsIds.value ?: emptyList()
            _activeConnectionsIds.value = connections

            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            updateActiveContacts(connections)

            // üî• –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            val hasActiveConnections = connections.isNotEmpty()
            if (hasActiveConnections) {
                // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Ä–≤–µ—Ä—É
                if (_serverConnectionState.value !is ServerConnectionState.Connected) {
                    updateServerConnectionState(ServerConnectionState.Connected)
                    Log.d("MyApp", "‚úÖ Server connection state: Connected (got ${connections.size} active connections)")
                }
            } else {
                // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π - —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                if (_serverConnectionState.value !is ServerConnectionState.Disconnected) {
                    updateServerConnectionState(ServerConnectionState.Disconnected)
                    Log.d("MyApp", "‚ùå Server connection state: Disconnected (empty connection list)")
                }
            }

            notifyActiveConnectionsChanged(connections)

            // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (connections.isNotEmpty()) {
                Log.d("MyApp", "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${connections.joinToString(", ")}")
            } else {
                Log.d("MyApp", "üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
            }
        }
    }

    private fun notifyActiveConnectionsChanged(connections: List<String>) {
        activeConnectionsChangeCallbacks.forEach { callback ->
            try {
                callback(connections)
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    fun subscribeToActiveConnectionsChanges(callback: (List<String>) -> Unit) {
        activeConnectionsChangeCallbacks.add(callback)
        callback(_activeConnectionsIds.value ?: emptyList())
    }

    fun unsubscribeFromActiveConnectionsChanges(callback: (List<String>) -> Unit) {
        activeConnectionsChangeCallbacks.remove(callback)
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ActualCall
    fun setCurrentActualCall(actualCall: ActualCall?) {
        _currentActualCall.value = actualCall
        notifyActualCallChanged(actualCall)
    }

    fun getCurrentActualCall(): ActualCall? = _currentActualCall.value

    fun clearCurrentActualCall() {
        setCurrentActualCall(null)
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è ActualCall
    fun subscribeToActualCallChanges(callback: (ActualCall?) -> Unit) {
        actualCallChangeCallbacks.add(callback)
        callback(_currentActualCall.value)
    }

    fun unsubscribeFromActualCallChanges(callback: (ActualCall?) -> Unit) {
        actualCallChangeCallbacks.remove(callback)
    }

    private fun notifyActualCallChanged(actualCall: ActualCall?) {
        actualCallChangeCallbacks.forEach { callback ->
            try {
                callback(actualCall)
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É
     * @param recipientId ID –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –∑–≤–æ–Ω–∏–º
     */
    fun initiateCall(recipientId: String) {
        Log.d("MyApp", "üìû Initiating call to: $recipientId")
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π ActualCall
        clearCurrentActualCall()
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π personalId
        val callerId = getPersonalId0()
        if (callerId.isNullOrBlank()) {
            Log.e("MyApp", "‚ùå Cannot initiate call: personalId is null or blank")
            return
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callId
        val callId = "call_${System.currentTimeMillis()}_${UUID.randomUUID().toString().substring(0, 8)}"
        
        // –°–æ–∑–¥–∞–µ–º ActualCall –æ–±—ä–µ–∫—Ç
        val actualCall = ActualCall(
            callId = callId,
            callerId = callerId,
            recipientId = recipientId,
            status = "null",
            step = "request_call",
            createdAt = System.currentTimeMillis(),
            offerSdp = null,
            answerSdp = null
        )
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ActualCall –≤ MyApp
        setCurrentActualCall(actualCall)
        
        Log.d("MyApp", "‚úÖ ActualCall created and set: $callId")
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ SignalClient –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    fun getSignalClient(): SignalClient {
        return signalClient
    }
    private fun loadContactsFromStorage() {
        try {
            val contactsFile = File(contactsJsonPath)

            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            val contactsDir = contactsFile.parentFile
            if (contactsDir != null && !contactsDir.exists()) {
                val created = contactsDir.mkdirs()
                if (created) {
                    Log.d("MyApp", "‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${contactsDir.absolutePath}")

                    // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                    val emptyContacts = ContactsResponse(emptyList())
                    val jsonString = Json.encodeToString(emptyContacts)
                    contactsFile.writeText(jsonString)

                    Log.d("MyApp", "‚úÖ –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω")
                } else {
                    Log.e("MyApp", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: ${contactsDir.absolutePath}")
                }
            }

            if (contactsFile.exists()) {
                val jsonString = contactsFile.readText()
                val contactsResponse = Json.decodeFromString<ContactsResponse>(jsonString)
                val sortedContacts = sortContactsAlphabeticallyWithRootFirst(contactsResponse.contacts)

                // –û–±–Ω–æ–≤–ª—è–µ–º LiveData —Å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
                _contactsLiveData.postValue(sortedContacts)

                // ‚¨áÔ∏è –£–ë–ò–†–ê–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï –í MMKV
                // mmkv.encode(CONTACTS_KEY, jsonString)

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ callback
                notifyContactsChanged(sortedContacts)
                // –ò–ó–í–õ–ï–ö–ê–ï–ú rootContactId –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –ö–û–ù–¢–ê–ö–¢–û–í
                extractPersonalIdFromRootContact(sortedContacts)

                Log.d("MyApp", "Successfully loaded ${sortedContacts.size} contacts from file")
            } else {
                Log.d("MyApp", "Contacts file not found at: $contactsJsonPath")
                // ‚¨áÔ∏è –£–ë–ò–†–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£ –ò–ó MMKV
                // loadContactsFromMMKV()

                // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                _contactsLiveData.postValue(emptyList())
                Log.d("MyApp", "Created empty contacts list")
            }
        } catch (e: Exception) {
            e.printStackTrace()
            Log.e("MyApp", "Error loading contacts from file: ${e.message}")
            // ‚¨áÔ∏è –£–ë–ò–†–ê–ï–ú FALLBACK –ù–ê MMKV
            // loadContactsFromMMKV()

            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            _contactsLiveData.postValue(emptyList())
        }
    }
//    private fun loadContactsFromStorage() {
//        try {
//            val contactsFile = File(contactsJsonPath)
//
//            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//            val contactsDir = contactsFile.parentFile
//            if (contactsDir != null && !contactsDir.exists()) {
//                val created = contactsDir.mkdirs()
//                if (created) {
//                    Log.d("MyApp", "‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${contactsDir.absolutePath}")
//
//                    // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
//                    val emptyContacts = ContactsResponse(emptyList())
//                    val jsonString = Json.encodeToString(emptyContacts)
//                    contactsFile.writeText(jsonString)
//
//                    Log.d("MyApp", "‚úÖ –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω")
//                } else {
//                    Log.e("MyApp", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: ${contactsDir.absolutePath}")
//                }
//            }
//
//            if (contactsFile.exists()) {
//                val jsonString = contactsFile.readText()
//                val contactsResponse = Json.decodeFromString<ContactsResponse>(jsonString)
//                val sortedContacts = sortContactsAlphabeticallyWithRootFirst(contactsResponse.contacts)
//
//                // –û–±–Ω–æ–≤–ª—è–µ–º LiveData —Å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
//                _contactsLiveData.postValue(sortedContacts)
//
//                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MMKV –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
//                mmkv.encode(CONTACTS_KEY, jsonString)
//
//                // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ callback
//                notifyContactsChanged(sortedContacts)
//                // –ò–ó–í–õ–ï–ö–ê–ï–ú rootContactId –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –ö–û–ù–¢–ê–ö–¢–û–í
//                extractPersonalIdFromRootContact(sortedContacts)
//
//                Log.d("MyApp", "Successfully loaded ${sortedContacts.size} contacts from file")
//            } else {
//                Log.d("MyApp", "Contacts file not found at: $contactsJsonPath")
//                // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ MMKV –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//                loadContactsFromMMKV()
//            }
//        } catch (e: Exception) {
//            e.printStackTrace()
//            Log.e("MyApp", "Error loading contacts from file: ${e.message}")
//            // Fallback to MMKV
//            loadContactsFromMMKV()
//        }
//    }
//    private fun loadContactsFromStorage() {
//        try {
//            val contactsFile = File(contactsJsonPath)
//            if (contactsFile.exists()) {
//                val jsonString = contactsFile.readText()
//                val contactsResponse = Json.decodeFromString<ContactsResponse>(jsonString)
//                val sortedContacts = sortContactsAlphabeticallyWithRootFirst(contactsResponse.contacts)
//
//                // –û–±–Ω–æ–≤–ª—è–µ–º LiveData —Å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
//                _contactsLiveData.postValue(sortedContacts)
//
//                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MMKV –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
//                mmkv.encode(CONTACTS_KEY, jsonString)
//
//                // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ callback
//                notifyContactsChanged(sortedContacts)
//                // –ò–ó–í–õ–ï–ö–ê–ï–ú rootContactId –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –ö–û–ù–¢–ê–ö–¢–û–í
//                extractPersonalIdFromRootContact(sortedContacts)
//
//                Log.d("MyApp", "Successfully loaded ${sortedContacts.size} contacts from file")
//            } else {
//                Log.d("MyApp", "Contacts file not found at: $contactsJsonPath")
//                // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ MMKV –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//                loadContactsFromMMKV()
//            }
//        } catch (e: Exception) {
//            e.printStackTrace()
//            Log.e("MyApp", "Error loading contacts from file: ${e.message}")
//            // Fallback to MMKV
//            loadContactsFromMMKV()
//        }
//    }

    fun deleteContactByListId(contactToDelete: Contact) {
        val currentContacts = _contactsLiveData.value ?: emptyList()

        Log.d("MyApp", "=== DELETE CONTACT BY LIST_ID ===")
        Log.d("MyApp", "Deleting contact: ${contactToDelete.Name} with list_id: ${contactToDelete.list_id}")
        Log.d("MyApp", "Current contacts count: ${currentContacts.size}")

        if (contactToDelete.list_id == null) {
            Log.e("MyApp", "‚ùå Cannot delete contact: list_id is null")
            return
        }

        val updatedContacts = currentContacts.filter {
            it.list_id != contactToDelete.list_id
        }

        if (updatedContacts.size == currentContacts.size) {
            Log.e("MyApp", "‚ùå Contact with list_id ${contactToDelete.list_id} not found for deletion")
            return
        }

        updateContacts(updatedContacts)
        saveContactsToJsonFile(updatedContacts)

        Log.d("MyApp", "‚úÖ Contact with list_id ${contactToDelete.list_id} deleted successfully")
        Log.d("MyApp", "Total contacts now: ${updatedContacts.size}")
    }

    fun deleteContactByListIdOnly(listId: Int?) {
        val currentContacts = _contactsLiveData.value ?: emptyList()

        Log.d("MyApp", "=== DELETE CONTACT BY LIST_ID ONLY ===")
        Log.d("MyApp", "Deleting contact with list_id: $listId")
        Log.d("MyApp", "Current contacts count: ${currentContacts.size}")

        if (listId == null) {
            Log.e("MyApp", "‚ùå Cannot delete contact: list_id is null")
            return
        }

        val updatedContacts = currentContacts.filter { it.list_id != listId }

        if (updatedContacts.size == currentContacts.size) {
            Log.e("MyApp", "‚ùå Contact with list_id $listId not found")
            return
        }

        updateContacts(updatedContacts)
        saveContactsToJsonFile(updatedContacts)

        Log.d("MyApp", "‚úÖ Contact with list_id $listId deleted successfully")
        Log.d("MyApp", "Total contacts now: ${updatedContacts.size}")
    }

    fun updateContactByListId(updatedContact: Contact) {
        val currentContacts = _contactsLiveData.value ?: emptyList()

        if (updatedContact.list_id == null) {
            val updatedContacts = currentContacts + updatedContact
            updateContacts(updatedContacts)
            saveContactsToJsonFile(updatedContacts)
            Log.d("MyApp", "New contact added (no list_id): ${updatedContact.Name}")
            Log.d("MyApp", "Total contacts now: ${updatedContacts.size}")
            return
        }

        val existingContactIndex = currentContacts.indexOfFirst {
            it.list_id == updatedContact.list_id
        }

        val updatedContacts = if (existingContactIndex != -1) {
            currentContacts.toMutableList().apply {
                this[existingContactIndex] = updatedContact
            }
        } else {
            currentContacts + updatedContact
        }

        updateContacts(updatedContacts)
        saveContactsToJsonFile(updatedContacts)

        if (existingContactIndex != -1) {
            Log.d("MyApp", "Contact with list_id ${updatedContact.list_id} updated successfully")
        } else {
            Log.d("MyApp", "New contact with list_id ${updatedContact.list_id} added successfully")
            Log.d("MyApp", "Total contacts now: ${updatedContacts.size}")
        }
    }

    private fun loadContactsFromMMKV() {
        try {
            val savedJson = mmkv.decodeString(CONTACTS_KEY)
            if (!savedJson.isNullOrEmpty()) {
                val contactsResponse = Json.decodeFromString<ContactsResponse>(savedJson)
                val sortedContacts = sortContactsAlphabeticallyWithRootFirst(contactsResponse.contacts)
                _contactsLiveData.postValue(sortedContacts)
                notifyContactsChanged(sortedContacts)
                // –ò–ó–í–õ–ï–ö–ê–ï–ú rootContactId –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –ö–û–ù–¢–ê–ö–¢–û–í
                extractPersonalIdFromRootContact(sortedContacts)

                Log.d("MyApp", "Successfully loaded ${sortedContacts.size} contacts from MMKV")
            } else {
                Log.d("MyApp", "No contacts found in MMKV")
            }
        } catch (e: Exception) {
            e.printStackTrace()
            Log.e("MyApp", "Error loading contacts from MMKV: ${e.message}")
        }
    }

    fun refreshContacts() {
        loadContactsFromStorage()
    }

    fun subscribeToContactsChanges(callback: (List<Contact>) -> Unit) {
        contactsChangeCallbacks.add(callback)
        callback(_contactsLiveData.value ?: emptyList())
    }

    fun unsubscribeFromContactsChanges(callback: (List<Contact>) -> Unit) {
        contactsChangeCallbacks.remove(callback)
    }

    fun subscribeToServerConnectionChanges(callback: (ServerConnectionState) -> Unit) {
        serverConnectionChangeCallbacks.add(callback)
        callback(_serverConnectionState.value ?: ServerConnectionState.Disconnected)
    }

    fun unsubscribeFromServerConnectionChanges(callback: (ServerConnectionState) -> Unit) {
        serverConnectionChangeCallbacks.remove(callback)
    }

    fun subscribeToPersonalIdChanges(callback: (String?) -> Unit) {
        personalIdChangeCallbacks.add(callback)
        callback(_personalId0.value)
    }

    fun unsubscribeFromPersonalIdChanges(callback: (String?) -> Unit) {
        personalIdChangeCallbacks.remove(callback)
    }

    private fun notifyContactsChanged(contacts: List<Contact>) {
        contactsChangeCallbacks.forEach { callback ->
            try {
                callback(contacts)
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º personal_id –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å root_contact = true
        extractPersonalIdFromRootContact(contacts)
    }

    private fun extractPersonalIdFromRootContact(contacts: List<Contact>) {
        try {
            val rootContact = contacts.find { it.root_contact == true }
            if (rootContact != null && !rootContact.personal_id.isNullOrBlank()) {
                val normalizedId = rootContact.personal_id!!.trim()
                _personalId0.postValue(normalizedId)
                _rootContactId.postValue(normalizedId)
                notifyPersonalIdChanged(normalizedId)

                // üî• –ù–û–í–û–ï: HTTP —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                Log.d("MyApp", "üöÄ HTTP —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
//                registerUserOnServer(normalizedId)

                // üî• –ù–û–í–û–ï: HTTP —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                Log.d("MyApp", "üöÄ HTTP —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
//                registerDeviceOnServer(deviceId)

                // ‚ùå –£–ë–†–ê–ù–û: startConnectionService() –æ—Ç—Å—é–¥–∞ - —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ ContactsListActivity
                // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ ForegroundServiceStartNotAllowedException –≤ Android 12+
                Log.d("MyApp", "‚ÑπÔ∏è ConnectionService will be started from ContactsListActivity")

                // ‚ùå –£–ë–†–ê–ù–û: checkAndConnectToServer(normalizedId) - WebSocket –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–≤–æ–Ω–∫–∞—Ö
                Log.d("MyApp", "‚ÑπÔ∏è WebSocket connection will be established only when needed for calls")

                Log.d("MyApp", "‚úÖ Personal ID –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ root –∫–æ–Ω—Ç–∞–∫—Ç–∞: ${rootContact.personal_id}")
            } else {
                Log.d("MyApp", "‚ÑπÔ∏è Root –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ personal_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            }
        } catch (e: Exception) {
            e.printStackTrace()
            Log.e("MyApp", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ personal_id: ${e.message}")
        }
    }

    fun setWebRTCActivityListener(listener: WebRTCClient.WebRTCListener?) {
        if (listener != null) {
            webRTCListener.addActivityListener(listener)
            Log.d("MyApp", "‚úÖ Activity listener added")
        } else {
            // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å listener
            // webRTCListener.removeActivityListener(listener)
            Log.d("MyApp", "üîÑ Activity listener cleared")
        }
    }
    fun initializeWebRTC(userId: String) {
        if (!isWebRTCInitialized) {
            try {
                webRTCClient = WebRTCClient(
                    context = this,
                    serverUrl = "https://e65ea583-8f5e-4d58-9f20-58e16b4d9ba5-00-182nvjnxjskc1.sisko.replit.dev",
                    userId = userId,
                    listener = webRTCListener
                )

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ MyApp –≤ WebRTCClient
                webRTCClient.setMyApp(this)

                // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú CALL MANAGER

                isWebRTCInitialized = true
                _webRTCInitializedLiveData.postValue(true)
                Log.d("MyApp", "‚úÖ WebRTC client initialized in MyApp with ID: $userId")
                
                // üî• –ù–û–í–û–ï: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebRTC
                deviceId = getDeviceIdentifier()
                webRTCClient.registerDevice(deviceId) { deviceList ->
                    Log.d("MyApp", "‚úÖ Device registered. Connected devices: ${deviceList?.size ?: 0}")
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    deviceList?.let { devices ->
                        updateActiveConnections(devices)
                        Log.d("MyApp", "üì± Updated active connections in UI: ${devices.size} devices")
                    }
                }
            } catch (e: Exception) {
                Log.e("MyApp", "‚ùå Error initializing WebRTC in MyApp: ${e.message}")
            }
        }
    }
//    fun initializeWebRTC(userId: String) {
//        if (!isWebRTCInitialized) {
//            try {
//                webRTCClient = WebRTCClient(
//                    context = this,
//                    serverUrl = "https://e65ea583-8f5e-4d58-9f20-58e16b4d9ba5-00-182nvjnxjskc1.sisko.replit.dev",
//                    userId = userId,
//                    listener = webRTCListener
//                )
//
//                // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú CALL MANAGER
//                callManager.initialize(webRTCClient)
//
//                isWebRTCInitialized = true
//                _webRTCInitializedLiveData.postValue(true)
//                Log.d("MyApp", "‚úÖ WebRTC client initialized in MyApp with ID: $userId")
//            } catch (e: Exception) {
//                Log.e("MyApp", "‚ùå Error initializing WebRTC in MyApp: ${e.message}")
//            }
//        }
//    }
//    fun acceptCall(callerId: String, callId: String) {
//        if (isWebRTCInitialized) {
//            webRTCClient.acceptCall(callerId, callId)
//            // ‚ùå –£–ë–ï–†–ò —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ - –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ acceptCall
//            // webRTCClient.startAudioSession()
//        }
//    }
//    fun acceptCall(callerId: String, callId: String) {
//        if (isWebRTCInitialized) {
//            webRTCClient.acceptCall(callerId, callId)
//            webRTCClient.startAudioSession() // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
//        }
//    }

    fun rejectCall(callerId: String, callId: String) {
        if (isWebRTCInitialized) {
            webRTCClient.rejectIncomingCall(callId)
        }
    }

    fun endCurrentCall() {
        if (isWebRTCInitialized) {
            webRTCClient.endCall()
        }
    }
    private fun notifyServerConnectionChanged(state: ServerConnectionState) {
        serverConnectionChangeCallbacks.forEach { callback ->
            try {
                callback(state)
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    private fun notifyPersonalIdChanged(personalId: String?) {
        personalIdChangeCallbacks.forEach { callback ->
            try {
                callback(personalId)
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    private fun checkAndConnectToServer(personalId: String) {
        connectionExecutor.execute {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                if (isConnectedToServer && socket?.connected() == true) {
                    Log.d("MyApp", "‚úÖ Already connected to server")
                    // ‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ ConnectionService
                    // startConnectionService()
                    return@execute
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
                updateServerConnectionState(ServerConnectionState.Connecting)

                Log.d("MyApp", "üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å personal_id: $personalId")

                // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
                if (isConnectedToServer && socket != null) {
                    disconnectFromServer()
                }

                // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                connectToServer(personalId)
                
                // ‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ ConnectionService
                // startConnectionService()

            } catch (e: Exception) {
                e.printStackTrace()
                handleConnectionError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: ${e.message}")
            }
        }
    }

    // –Ø–í–ù–ê–Ø –ü–ï–†–ï–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–î –¢–ï–ú –ñ–ï personal_id
    fun forceReregister() {
        val personalId = _personalId0.value
        if (personalId.isNullOrBlank()) return
        try {
            if (socket?.connected() == true) {
                socket?.emit("register", personalId)
                Log.d("MyApp", "üë§ Force re-register with ID: $personalId")
            } else {
                // ‚ùå –£–ë–†–ê–ù–û: checkAndConnectToServer(personalId) - WebSocket –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–≤–æ–Ω–∫–∞—Ö
                Log.d("MyApp", "‚ÑπÔ∏è WebSocket connection will be established only when needed for calls")
            }
        } catch (e: Exception) {
            Log.e("MyApp", "‚ùå Force re-register error: ${e.message}")
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: HTTP —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    private fun registerUserOnServer(userId: String) {
        connectionExecutor.execute {
            try {
                val url = URL("$SIGNALING_SERVER_URL/api/users/register")
                val connection = url.openConnection() as HttpURLConnection
                connection.requestMethod = "POST"
                connection.setRequestProperty("Content-Type", "application/json")
                connection.doOutput = true

                val json = JSONObject().apply {
                    put("userId", userId)
                }

                connection.outputStream.use { os ->
                    os.write(json.toString().toByteArray())
                }

                val responseCode = connection.responseCode
                if (responseCode == 200 || responseCode == 201) {
                    val response = connection.inputStream.bufferedReader().use { it.readText() }
                    val jsonResponse = JSONObject(response)
                    
                    if (jsonResponse.optBoolean("success", false)) {
                        Log.d("MyApp", "‚úÖ User $userId successfully registered on server via HTTP")
                        
                        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        val userList = mutableListOf<String>()
                        val usersArray = jsonResponse.optJSONArray("userList")
                        usersArray?.let { array ->
                            for (i in 0 until array.length()) {
                                userList.add(array.getString(i))
                            }
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
                        mainHandler.post {
                            updateActiveConnections(userList)
                            Log.d("MyApp", "üì± Updated active connections from HTTP registration: ${userList.size} users")
                        }
                    } else {
                        Log.e("MyApp", "‚ùå HTTP user registration failed: ${jsonResponse.optString("error")}")
                    }
                } else {
                    Log.e("MyApp", "‚ùå HTTP error registering user: $responseCode")
                }
                connection.disconnect()
            } catch (e: Exception) {
                Log.e("MyApp", "‚ùå Error registering user via HTTP: ${e.message}")
            }
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: HTTP —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
//    private fun registerDeviceOnServer(deviceId: String) {
//        connectionExecutor.execute {
//            try {
//                val url = URL("$SIGNALING_SERVER_URL/api/devices/register")
//                val connection = url.openConnection() as HttpURLConnection
//                connection.requestMethod = "POST"
//                connection.setRequestProperty("Content-Type", "application/json")
//                connection.doOutput = true
//
//                val json = JSONObject().apply {
//                    put("deviceId", deviceId)
//                }
//
//                connection.outputStream.use { os ->
//                    os.write(json.toString().toByteArray())
//                }
//
//                val responseCode = connection.responseCode
//                if (responseCode == 200) {
//                    Log.d("MyApp", "‚úÖ Device registered on server: $deviceId")
//                    } else {
//                    Log.e("MyApp", "‚ùå Device registration failed: HTTP $responseCode")
//                }
//            } catch (e: Exception) {
//                Log.e("MyApp", "‚ùå Error registering device: ${e.message}")
//            }
//        }
//    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: HTTP –æ—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    private fun unregisterUserFromServer(userId: String) {
        connectionExecutor.execute {
            try {
                val url = URL("$SIGNALING_SERVER_URL/api/users/unregister")
                val connection = url.openConnection() as HttpURLConnection
                connection.requestMethod = "POST"
                connection.setRequestProperty("Content-Type", "application/json")
                connection.doOutput = true

                val json = JSONObject().apply {
                    put("userId", userId)
                }

                connection.outputStream.use { os ->
                    os.write(json.toString().toByteArray())
                }

                val responseCode = connection.responseCode
                if (responseCode == 200 || responseCode == 204) {
                    Log.d("MyApp", "‚úÖ User $userId successfully unregistered from server via HTTP")
                } else {
                    Log.e("MyApp", "‚ùå HTTP error unregistering user: $responseCode")
                }
                connection.disconnect()
            } catch (e: Exception) {
                Log.e("MyApp", "‚ùå Error unregistering user via HTTP: ${e.message}")
            }
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: HTTP –æ—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    private fun unregisterDeviceFromServer(deviceId: String) {
        connectionExecutor.execute {
            try {
                Log.d("MyApp", "üì± Starting device unregistration: $deviceId")
                
                val url = URL("$SIGNALING_SERVER_URL/api/devices/unregister")
                val connection = url.openConnection() as HttpURLConnection
                connection.requestMethod = "POST"
                connection.setRequestProperty("Content-Type", "application/json")
                connection.doOutput = true
                connection.connectTimeout = 5000 // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                connection.readTimeout = 5000

                val json = JSONObject().apply {
                    put("deviceId", deviceId)
                }
                
                Log.d("MyApp", "üì± Sending unregister request for device: $deviceId")

                connection.outputStream.use { os ->
                    os.write(json.toString().toByteArray())
                }

                val responseCode = connection.responseCode
                Log.d("MyApp", "üì± HTTP response code: $responseCode")
                
                if (responseCode == 200 || responseCode == 204) {
                    Log.d("MyApp", "‚úÖ Device unregistered from server: $deviceId")
                } else {
                    Log.e("MyApp", "‚ùå Device unregistration failed: HTTP $responseCode")
                    // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    try {
                        val errorResponse = connection.errorStream?.bufferedReader()?.readText()
                        Log.e("MyApp", "‚ùå Server error response: $errorResponse")
                    } catch (e: Exception) {
                        Log.e("MyApp", "‚ùå Could not read error response: ${e.message}")
                    }
                }
                connection.disconnect()
            } catch (e: Exception) {
                Log.e("MyApp", "‚ùå Error unregistering device: ${e.message}")
                e.printStackTrace()
            }
        }
    }


    private fun connectToServer(personalId: String) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if (isConnectedToServer && socket?.connected() == true) {
                Log.d("MyApp", "‚úÖ Already connected, no need to connect again")
                return
            }
            
            // –û–¢–ú–ï–ù–Ø–ï–ú –ü–†–ï–î–´–î–£–©–ò–ô –¢–ê–ô–ú–ê–£–¢ –ï–°–õ–ò –û–ù –ë–´–õ
            cancelConnectionTimeout()

            // –°–æ–∑–¥–∞–µ–º Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            val options = IO.Options().apply {
                forceNew = true
                reconnectionAttempts = 0  // ‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                reconnection = false      // ‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                timeout = 20000
                // –†–∞–∑—Ä–µ—à–∞–µ–º fallback –Ω–∞ polling (—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                path = "/socket.io/"
                reconnectionDelay = 0     // ‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–û: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                reconnectionDelayMax = 0 // ‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–û: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            }

            socket = IO.socket(SIGNALING_SERVER_URL, options)

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Socket.IO
            socket?.on(Socket.EVENT_CONNECT) {
                Log.d("MyApp", "üîå Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω")
                connectionRetryCount = 0

                // –û–¢–ú–ï–ù–Ø–ï–ú –¢–ê–ô–ú–ê–£–¢ –ü–†–ò –£–°–ü–ï–®–ù–û–ú –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ò
                cancelConnectionTimeout()

                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                socket?.emit("register", personalId)

                // –ú–û–ú–ï–ù–¢–ê–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                updateServerConnectionState(ServerConnectionState.Connected)
                isConnectedToServer = true

                // –ó–ê–ü–£–°–ö–ê–ï–ú HTTP –û–ü–†–û–° –í–•–û–î–Ø–©–ò–• –ó–í–û–ù–ö–û–í (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å Socket.IO)
                startIncomingCallsPolling()

                // –ó–ê–ü–†–ê–®–ò–í–ê–ï–ú –°–ü–ò–°–û–ö –ü–û–î–ö–õ–Æ–ß–ï–ù–ù–´–• ID
                fetchActiveConnectionsFromServer()

                mainHandler.post {
//                    Toast.makeText(this, "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É", Toast.LENGTH_SHORT).show()
                }
            }

            socket?.on("registration_success") { args ->
//                Log.d("MyApp", "‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
                fetchActiveConnectionsFromServer()
            }

            socket?.on("user_connected") { data ->
                fetchActiveConnectionsFromServer()
//                Log.d("MyApp", "üì± –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            }

            socket?.on("user_disconnected") { data ->
                fetchActiveConnectionsFromServer()
//                Log.d("MyApp", "üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
            }

            socket?.on("registration_failed") { args ->
                Log.d("MyApp", "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            }

            socket?.on(Socket.EVENT_DISCONNECT) {
                Log.d("MyApp", "üîå Socket.IO –æ—Ç–∫–ª—é—á–µ–Ω")

                // –ó–ê–ü–£–°–ö–ê–ï–ú –¢–ê–ô–ú–ê–£–¢ –¢–û–õ–¨–ö–û –ï–°–õ–ò –†–ê–ù–¨–®–ï –ë–´–õ–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
                if (isConnectedToServer) {
                    scheduleConnectionTimeout()
                }
            }

            // –ü–û–í–ï–î–ï–ù–ò–ï –ü–†–ò –ü–û–í–¢–û–†–ù–û–ú –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ò
//            socket?.on(Socket.EVENT_RECONNECT) {
//                try {
//                    val id = _personalId0.value
//                    if (!id.isNullOrBlank()) {
//                        socket?.emit("register", id)
//                        Log.d("MyApp", "üîÑ Reconnected ‚Üí re-register: $id")
//                    }
//                } catch (e: Exception) {
//                    Log.e("MyApp", "‚ùå Re-register on reconnect error: ${e.message}")
//                }
//            }
//
//            socket?.on(Socket.EVENT_RECONNECT_ATTEMPT) { args ->
//                Log.d("MyApp", "üîÑ Reconnect attempt: ${args.joinToString()}")
//            }

            socket?.on(Socket.EVENT_CONNECT_ERROR) { args ->
                val errorMessage = args.joinToString()
                Log.e("MyApp", "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO: $errorMessage")

                // –ó–ê–ü–£–°–ö–ê–ï–ú –¢–ê–ô–ú–ê–£–¢ –ü–†–ò –û–®–ò–ë–ö–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
                scheduleConnectionTimeout()
            }

            // –ó–ê–ü–£–°–ö–ê–ï–ú –¢–ê–ô–ú–ê–£–¢ –ü–†–ò –ù–ê–ß–ê–õ–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
            scheduleConnectionTimeout()

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            socket?.connect()

        } catch (e: Exception) {
            e.printStackTrace()
            handleConnectionError("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: ${e.message}")
        }
    }

    // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–ê–ô–ú–ê–£–¢–û–ú
    private fun scheduleConnectionTimeout() {
        if (!isConnectionTimeoutScheduled) {
            isConnectionTimeoutScheduled = true
            connectionTimeoutHandler.postDelayed({
                handleConnectionTimeout()
            }, CONNECTION_TIMEOUT_DELAY)
            Log.d("MyApp", "‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥")
        }
    }

    private fun cancelConnectionTimeout() {
        if (isConnectionTimeoutScheduled) {
            connectionTimeoutHandler.removeCallbacksAndMessages(null)
            isConnectionTimeoutScheduled = false
            Log.d("MyApp", "‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω")
        }
    }

    private fun handleConnectionTimeout() {
        isConnectionTimeoutScheduled = false

        // –ü–†–û–í–ï–†–Ø–ï–ú, –ß–¢–û –ú–´ –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–´
        if (!isConnectedToServer && socket?.connected() != true) {
            Log.d("MyApp", "‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—Ç–µ–∫ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å Disconnected")
            updateServerConnectionState(ServerConnectionState.Disconnected)
            isConnectedToServer = false
            stopIncomingCallsPolling() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP –æ–ø—Ä–æ—Å
            updateActiveConnections(emptyList())

            mainHandler.post {
                Toast.makeText(this, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É", Toast.LENGTH_SHORT).show()
            }
        } else {
            Log.d("MyApp", "‚è∞ –¢–∞–π–º–∞—É—Ç –∏—Å—Ç–µ–∫, –Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å - —Å—Ç–∞—Ç—É—Å –Ω–µ –º–µ–Ω—è–µ–º")
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö
    fun refreshActiveConnections() {
        if (isConnectedToServer) {
            fetchActiveConnectionsFromServer()
        } else {
            Log.d("MyApp", "‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Ä–≤–µ—Ä—É, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö")
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    private fun updateServerConnectionState(state: ServerConnectionState) {
        mainHandler.post {
            _serverConnectionState.value = state
            notifyServerConnectionChanged(state)

            // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            when (state) {
                is ServerConnectionState.Connected -> Log.d("MyApp", "‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: Connected")
                is ServerConnectionState.Connecting -> Log.d("MyApp", "üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: Connecting")
                is ServerConnectionState.Disconnected -> Log.d("MyApp", "üîå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: Disconnected")
                is ServerConnectionState.Error -> Log.d("MyApp", "‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: Error - ${state.message}")
            }
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    private fun handleConnectionError(errorMessage: String) {
        isConnectedToServer = false
        stopIncomingCallsPolling() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP –æ–ø—Ä–æ—Å
        updateServerConnectionState(ServerConnectionState.Error(errorMessage))

        mainHandler.post {
            Toast.makeText(this, "‚ùå $errorMessage", Toast.LENGTH_LONG).show()
        }
    }

    private fun disconnectFromServer() {
        try {
            // –û–¢–ú–ï–ù–Ø–ï–ú –¢–ê–ô–ú–ê–£–¢ –ü–†–ò –†–£–ß–ù–û–ú –û–¢–ö–õ–Æ–ß–ï–ù–ò–ò
            cancelConnectionTimeout()

            // –û—Ç–∫–ª—é—á–∞–µ–º Socket.IO
            socket?.disconnect()
            socket?.off()
            socket = null

            // –ú–ì–ù–û–í–ï–ù–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –ü–†–ò –†–£–ß–ù–û–ú –û–¢–ö–õ–Æ–ß–ï–ù–ò–ò
            isConnectedToServer = false
            stopIncomingCallsPolling() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP –æ–ø—Ä–æ—Å
            updateServerConnectionState(ServerConnectionState.Disconnected)
            updateActiveContacts(emptyList())

            Log.d("MyApp", "üîå –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
    private fun saveContactsToJsonFile(contacts: List<Contact>) {
        try {
            val contactsFile = File(contactsJsonPath)
            val contactsDir = contactsFile.parentFile

            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (contactsDir != null && !contactsDir.exists()) {
                val created = contactsDir.mkdirs()
                if (created) {
                    Log.d("MyApp", "‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${contactsDir.absolutePath}")
                } else {
                    Log.e("MyApp", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${contactsDir.absolutePath}")
                    return
                }
            }

            val sortedContacts = sortContactsAlphabeticallyWithRootFirst(contacts)
            val contactsResponse = ContactsResponse(sortedContacts)
            val jsonString = Json.encodeToString(contactsResponse)
            contactsFile.writeText(jsonString)

            Log.d("MyApp", "Contacts successfully saved to JSON file: ${contactsFile.absolutePath}")
            Log.d("MyApp", "Total contacts saved: ${sortedContacts.size}")
        } catch (e: Exception) {
            e.printStackTrace()
            Log.e("MyApp", "Error saving contacts to JSON file: ${e.message}")
        }
    }
//    private fun saveContactsToJsonFile(contacts: List<Contact>) {
//        try {
//            val contactsFile = File(contactsJsonPath)
//            val sortedContacts = sortContactsAlphabeticallyWithRootFirst(contacts)
//            contactsFile.parentFile?.mkdirs()
//
//            val contactsResponse = ContactsResponse(sortedContacts)
//            val jsonString = Json.encodeToString(contactsResponse)
//            contactsFile.writeText(jsonString)
//
//            Log.d("MyApp", "Contacts successfully saved to JSON file: ${contactsFile.absolutePath}")
//            Log.d("MyApp", "Total contacts saved: ${sortedContacts.size}")
//        } catch (e: Exception) {
//            e.printStackTrace()
//            Log.e("MyApp", "Error saving contacts to JSON file: ${e.message}")
//        }
//    }

    fun getRootContactId(): String? = _rootContactId.value

    fun updateContacts(newContacts: List<Contact>) {
        val sortedContacts = sortContactsAlphabeticallyWithRootFirst(newContacts)
        _contactsLiveData.postValue(sortedContacts)
        val contactsResponse = ContactsResponse(sortedContacts)
        val jsonString = Json.encodeToString(contactsResponse)
        mmkv.encode(CONTACTS_KEY, jsonString)
        notifyContactsChanged(sortedContacts)
        extractPersonalIdFromRootContact(sortedContacts)

        Log.d("MyApp", "Updated contacts list with ${sortedContacts.size} contacts")
    }

    fun saveUserCredentials(userId: String, authToken: String) {
        mmkv.encode(USER_ID_KEY, userId)
        mmkv.encode(AUTH_TOKEN_KEY, authToken)
    }

    fun getSavedUserId(): String? = mmkv.decodeString(USER_ID_KEY)

    private fun sortContactsAlphabeticallyWithRootFirst(contacts: List<Contact>): List<Contact> {
        return contacts.sortedWith(compareByDescending<Contact> { it.root_contact == true }
            .thenBy { it.Name ?: "" })
    }

    fun getSavedAuthToken(): String? = mmkv.decodeString(AUTH_TOKEN_KEY)

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è personal_id –∏–∑ root-–∫–æ–Ω—Ç–∞–∫—Ç–∞
    fun getPersonalId0(): String? = _personalId0.value

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É
    fun isConnectedToServer(): Boolean = isConnectedToServer

    fun reconnectToServer() {
        val personalId = _personalId0.value
        if (!personalId.isNullOrBlank()) {
            // ‚ùå –£–ë–†–ê–ù–û: checkAndConnectToServer(personalId) - WebSocket –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–≤–æ–Ω–∫–∞—Ö
            Log.d("MyApp", "‚ÑπÔ∏è WebSocket connection will be established only when needed for calls")
            Toast.makeText(this, "‚ÑπÔ∏è WebSocket –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–≤–æ–Ω–∫–∞—Ö", Toast.LENGTH_SHORT).show()
        } else {
            Toast.makeText(this, "‚ùå Personal ID –Ω–µ –Ω–∞–π–¥–µ–Ω", Toast.LENGTH_SHORT).show()
        }
    }

    fun disconnectFromServerPublic() {
        disconnectFromServer()
    }

    // ========== CONNECTION SERVICE –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ==========
    
    fun startConnectionService() {
        val personalId = getPersonalId0()
        Log.d("MyApp", "üîç Attempting to start ConnectionService...")
        Log.d("MyApp", "   - personalId: ${personalId?.take(8)}...")
        Log.d("MyApp", "   - isConnectionServiceRunning: ${isConnectionServiceRunning()}")
        Log.d("MyApp", "   - deviceId: ${deviceId.take(8)}...")
        
        if (!personalId.isNullOrBlank()) {
            try {
                Log.d("MyApp", "üöÄ Calling ConnectionService.startService()...")
                ConnectionService.startService(
                    this,
                    "https://e65ea583-8f5e-4d58-9f20-58e16b4d9ba5-00-182nvjnxjskc1.sisko.replit.dev",
                    personalId
                )
                Log.d("MyApp", "‚úÖ ConnectionService.startService() called successfully")
                
                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                val intent = Intent(this, ConnectionService::class.java)
                Log.d("MyApp", "üîó Creating bind intent: ${intent.component}")
                val bindResult = bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE)
                
                Log.d("MyApp", "üîÑ ConnectionService start requested")
                Log.d("MyApp", "   - bindService result: $bindResult")
                Log.d("MyApp", "   - userId: $personalId")
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                Handler(Looper.getMainLooper()).postDelayed({
                    Log.d("MyApp", "üîç ConnectionService status check after 3 seconds:")
                    Log.d("MyApp", "   - isConnectionServiceRunning: ${isConnectionServiceRunning()}")
                    Log.d("MyApp", "   - getConnectionService: ${getConnectionService()}")
                }, 3000)
                
            } catch (e: Exception) {
                Log.e("MyApp", "‚ùå Error starting ConnectionService: ${e.message}")
                e.printStackTrace()
            }
        } else {
            Log.w("MyApp", "‚ö†Ô∏è Cannot start ConnectionService: personalId is null or blank")
            Log.d("MyApp", "   - personalId value: '$personalId'")
            Log.d("MyApp", "   - Will retry when personalId becomes available")
        }
    }
    
    fun stopConnectionService() {
        Log.d("MyApp", "üõë Stopping ConnectionService...")
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ HTTP
        val personalId = getPersonalId0()
        if (!personalId.isNullOrBlank()) {
            Log.d("MyApp", "üì§ Unregistering user from server: $personalId")
            unregisterUserFromServer(personalId)
        }
        
        if (deviceId.isNotEmpty()) {
            Log.d("MyApp", "üì§ Unregistering device from server: $deviceId")
            unregisterDeviceFromServer(deviceId)
        }
        
        // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Å–µ—Ä–≤–∏—Å–∞
        Handler(Looper.getMainLooper()).postDelayed({
            // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ —Å–µ—Ä–≤–∏—Å—É
            if (isServiceBound) {
                unbindService(serviceConnection)
                isServiceBound = false
                Log.d("MyApp", "üîó Service unbound")
            }
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
            val intent = Intent(this, ConnectionService::class.java)
            stopService(intent)
            connectionService = null
            
            Log.d("MyApp", "‚úÖ ConnectionService stopped and unbound")
        }, 1000) // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    }
    
    fun isConnectionServiceRunning(): Boolean {
        return connectionService != null && isServiceBound
    }
    
    fun getConnectionService(): ConnectionService? {
        return connectionService
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback'–æ–≤ –≤ ConnectionService
    fun registerConnectionServiceCallbacks() {
        connectionService?.let { service ->
            Log.d("MyApp", "‚úÖ ConnectionService callbacks registered (no callbacks in current implementation)")
        }
    }
    
    fun unregisterConnectionServiceCallbacks() {
        connectionService?.let { service ->
            Log.d("MyApp", "üîÑ ConnectionService callbacks unregistered")
        }
    }
    
    fun cleanup() {
        networkManager.disconnect()
        // –û—Ç–∫–ª—é—á–∞–µ–º SignalClient –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
        signalClient.disconnect()
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        disconnectFromServer()
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ConnectionService
        stopConnectionService()
    }

    private fun generateNextListId(contacts: List<Contact>): Int {
        val maxListId = contacts.maxOfOrNull { it.list_id ?: -1 } ?: -1
        return maxListId + 1
    }

    fun addContact(newContact: Contact) {
        try {
            val currentContacts = _contactsLiveData.value ?: emptyList()
            val nextListId = generateNextListId(currentContacts)
            val contactWithId = newContact.copy(list_id = nextListId)
            val updatedContacts = currentContacts + contactWithId

            updateContacts(updatedContacts)
            saveContactsToJsonFile(updatedContacts)

            Log.d("MyApp", "New contact successfully created: ${contactWithId.Name} (list_id: $nextListId)")
            Log.d("MyApp", "Total contacts now: ${updatedContacts.size}")

        } catch (e: Exception) {
            e.printStackTrace()
            Log.e("MyApp", "Error creating new contact: ${e.message}")
        }
    }

    override fun onTerminate() {
        super.onTerminate()
        
        Log.d("MyApp", "üõë MyApp terminating - cleaning up registrations")
        
        // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ConnectionService
        try {
            Log.d("MyApp", "üõë Stopping ConnectionService on terminate")
            stopConnectionService()
        } catch (e: Exception) {
            Log.e("MyApp", "‚ùå Error stopping ConnectionService on terminate: ${e.message}")
        }
        
        // üî• –û–¢–ú–ï–ù–Ø–ï–ú –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–ê –°–ï–†–í–ï–†–ï
        val personalId = getPersonalId0()
        if (!personalId.isNullOrBlank()) {
            Log.d("MyApp", "üì§ Unregistering user from server: $personalId")
            unregisterUserFromServer(personalId)
        } else {
            Log.d("MyApp", "‚ö†Ô∏è No personalId found for unregistration")
        }
        
        // üî• –û–¢–ú–ï–ù–Ø–ï–ú HTTP –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ –£–°–¢–†–û–ô–°–¢–í–ê –ù–ê –°–ï–†–í–ï–†–ï
        if (deviceId.isNotEmpty()) {
            Log.d("MyApp", "üì§ Unregistering device from server: $deviceId")
            unregisterDeviceFromServer(deviceId)
        } else {
            Log.d("MyApp", "‚ö†Ô∏è No deviceId found for unregistration")
        }
        
        // üî• –û–¢–ú–ï–ù–Ø–ï–ú –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ –£–°–¢–†–û–ô–°–¢–í–ê –ß–ï–†–ï–ó WebRTC
        if (isWebRTCInitialized && deviceId.isNotEmpty()) {
            try {
                webRTCClient.unregisterDevice(deviceId) { success ->
                    if (success) {
                        Log.d("MyApp", "‚úÖ Device unregistered via WebRTC on terminate")
                    } else {
                        Log.e("MyApp", "‚ùå Failed to unregister device via WebRTC")
                    }
                }
            } catch (e: Exception) {
                Log.e("MyApp", "‚ùå Error unregistering device via WebRTC: ${e.message}")
            }
        }
        
        // üî• –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú ConnectionService
        try {
            stopConnectionService()
            Log.d("MyApp", "‚úÖ ConnectionService stopped")
        } catch (e: Exception) {
            Log.e("MyApp", "‚ùå Error stopping ConnectionService: ${e.message}")
        }
        
        cleanup()
        Log.d("MyApp", "‚úÖ MyApp cleanup completed")
    }

    // üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ProcessLifecycleOwner –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    private fun registerProcessLifecycleObserver() {
        ProcessLifecycleOwner.get().lifecycle.addObserver(object : LifecycleObserver {
            @OnLifecycleEvent(Lifecycle.Event.ON_STOP)
            fun onAppBackgrounded() {
                Log.d("MyApp", "üì± App backgrounded - checking if cleanup needed")
                // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—à–ª–æ –≤ —Ñ–æ–Ω, –Ω–æ –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ
            }

            @OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)
            fun onAppDestroyed() {
                Log.d("MyApp", "üíÄ App process destroyed - performing emergency cleanup")
                // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–æ - –≤—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É
                performEmergencyCleanup()
            }
        })
    }

    // üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
    private fun performEmergencyCleanup() {
        try {
            Log.d("MyApp", "üö® Emergency cleanup started")
            
            // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ConnectionService
            try {
                Log.d("MyApp", "üõë Stopping ConnectionService in emergency cleanup")
                stopConnectionService()
            } catch (e: Exception) {
                Log.e("MyApp", "‚ùå Error stopping ConnectionService in emergency cleanup: ${e.message}")
            }
            
            // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            val personalId = getPersonalId0()
            if (!personalId.isNullOrBlank()) {
                Log.d("MyApp", "üì§ Emergency unregistering user: $personalId")
                unregisterUserFromServer(personalId)
            }
            
            // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if (deviceId.isNotEmpty()) {
                Log.d("MyApp", "üì§ Emergency unregistering device: $deviceId")
                unregisterDeviceFromServer(deviceId)
            }
            
            Log.d("MyApp", "‚úÖ Emergency cleanup completed")
        } catch (e: Exception) {
            Log.e("MyApp", "‚ùå Error during emergency cleanup: ${e.message}")
        }
    }
}
