    package com.ppnkdeapp.mycontacts

    import android.Manifest
import android.content.Context
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.os.VibrationEffect
import android.os.Vibrator
    import androidx.compose.material.Icon
    import androidx.compose.material.IconButton
    import androidx.compose.material.icons.Icons
    import androidx.compose.material.icons.filled.Call
    import android.content.Intent
    import android.content.pm.PackageManager
    import android.media.RingtoneManager
    import android.net.Uri
    import com.ppnkdeapp.mycontacts.models.Call
    import android.util.Log
    import android.widget.Toast
    import androidx.activity.ComponentActivity
    import androidx.activity.compose.setContent
    import androidx.activity.result.contract.ActivityResultContracts
    import androidx.compose.animation.animateColorAsState
    import androidx.compose.foundation.clickable
    import androidx.compose.foundation.layout.*
    import androidx.compose.foundation.lazy.LazyColumn
    import androidx.compose.material.CircularProgressIndicator
    import androidx.compose.foundation.lazy.items
    import androidx.compose.material.*
    import androidx.compose.runtime.*
    import androidx.compose.runtime.livedata.observeAsState
    import androidx.compose.ui.Alignment
    import androidx.compose.ui.Modifier
    import androidx.compose.ui.graphics.Color
    import androidx.compose.ui.platform.LocalContext
    import androidx.compose.ui.text.font.FontWeight
    import androidx.compose.ui.text.style.TextAlign
    import androidx.compose.ui.tooling.preview.Preview
    import androidx.compose.ui.unit.dp
    import androidx.compose.ui.unit.sp
    import androidx.compose.foundation.background
    import androidx.compose.animation.core.tween
    import androidx.compose.foundation.shape.CircleShape
    import androidx.compose.foundation.shape.RoundedCornerShape
    import androidx.compose.material.icons.filled.Message
    import androidx.compose.material.icons.filled.Mic
    import androidx.compose.material.icons.filled.VolumeUp
    import androidx.core.content.ContextCompat
    import androidx.lifecycle.LiveData
    import androidx.lifecycle.MutableLiveData
    import com.google.accompanist.insets.ProvideWindowInsets
    import com.google.accompanist.insets.statusBarsPadding
    // CallManager –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    import com.ppnkdeapp.mycontacts.call.WebRTCClient
    import kotlinx.coroutines.CoroutineScope
    import kotlinx.coroutines.Dispatchers
    import org.webrtc.MediaStream
    import org.webrtc.PeerConnection
    import kotlinx.coroutines.delay
    import kotlinx.coroutines.launch
    import kotlinx.coroutines.withContext

    class ContactsListActivity : ComponentActivity(), WebRTCClient.WebRTCListener {

        private var webRTCClient: WebRTCClient? = null

        private val _incomingCallState = mutableStateOf(IncomingCallState())
        val incomingCallState: IncomingCallState get() = _incomingCallState.value

        data class IncomingCallState(
            val isIncomingCall: Boolean = false,
            val fromUserId: String = "",
            val callId: String = ""
        )

        // CallManager –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

        private var isWebRTCInitialized = false
        private var ringtone: android.media.Ringtone? = null

        private val permissionLauncher = registerForActivityResult(
            ActivityResultContracts.RequestMultiplePermissions()
        ) { permissions ->
            val allGranted = permissions.values.all { it }
            if (allGranted) {
                showMainContent()
            } else {
                showPermissionDeniedScreen()
            }
        }

        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)
            
            // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º ConnectionService –°–†–ê–ó–£ –ø–æ—Å–ª–µ onCreate, –ø–æ–∫–∞ Activity –≤–∏–¥–Ω–∞
            val myApp = application as MyApp
            
            // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º ConnectionService –î–û checkPermissions
            // —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–∏–¥–∏–º–æ–π Activity
            Handler(Looper.getMainLooper()).postDelayed({
                try {
                    Log.d("ContactsListActivity", "üöÄ Starting ConnectionService in onCreate...")
                    myApp.startConnectionService()
                } catch (e: Exception) {
                    Log.e("ContactsListActivity", "‚ùå Error starting ConnectionService in onCreate: ${e.message}")
                }
            }, 100) // –ó–∞–¥–µ—Ä–∂–∫–∞ 100ms –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Activity
            
            checkPermissions()
            // CallManager –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

            setupServerConnectionObservers()
            setupConnectionServiceIntegration()

            myApp.rootContactId.observe(this) { rootContactId ->
                if (rootContactId != null) {
                    try {
                        if (!myApp.isWebRTCInitialized()) {
                            myApp.initializeWebRTC(rootContactId)
                        }
                        webRTCClient = myApp.getWebRTCClient()
                        myApp.setWebRTCActivityListener(this@ContactsListActivity)
//                        webRTCClient?.setListener(this@ContactsListActivity)
                        initializeActivity()
                    } catch (e: Exception) {
                        Log.e("WebRTC", "‚ùå Error getting WebRTC client: ${e.message}")
//                        myApp.initializeWebRTC(rootContactId)
                        webRTCClient = myApp.getWebRTCClient()
                    }
                }
            }

//            callManager.incomingCall.observe(this) { call ->
//                call?.let {
//                    showIncomingCallDialog(it)
//                }
//            }
        }

        private fun setupServerConnectionObservers() {
            val myApp = application as MyApp

            myApp.serverConnectionState.observe(this) { state ->
                when (state) {
                    is MyApp.ServerConnectionState.Connected -> {
                        Log.d("SERVER_STATUS", "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É")
                    }

                    is MyApp.ServerConnectionState.Disconnected -> {
                        Log.d("SERVER_STATUS", "üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                    }

                    is MyApp.ServerConnectionState.Connecting -> {
                        Log.d("SERVER_STATUS", "üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                    }

                    is MyApp.ServerConnectionState.Error -> {
                        Log.e("SERVER_STATUS", "‚ùå –û—à–∏–±–∫–∞: ${state.message}")
                    }
                }
            }

            myApp.activeConnectionsIds.observe(this) { connections ->
//                Log.d("ACTIVE_USERS", "üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${connections.size}")
            }

            myApp.myActiveContacts.observe(this) { activeContacts ->
//                Log.d("ACTIVE_CONTACTS", "üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${activeContacts.size}")
            }
        }

        private fun setupConnectionServiceIntegration() {
            val myApp = application as MyApp

            Log.d("ContactsListActivity", "üîç Checking ConnectionService status...")
            Log.d(
                "ContactsListActivity",
                "   - isConnectionServiceRunning: ${myApp.isConnectionServiceRunning()}"
            )
            Log.d(
                "ContactsListActivity",
                "   - getConnectionService: ${myApp.getConnectionService()}"
            )

            // üî• –ò–ó–ú–ï–ù–ï–ù–û: –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º
            // ConnectionService —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ onCreate()
            if (myApp.isConnectionServiceRunning()) {
                Log.d("ContactsListActivity", "‚úÖ ConnectionService running")
            } else {
                Log.d("ContactsListActivity", "‚è≥ ConnectionService starting...")
            }

            Log.d("ContactsListActivity", "üì° ConnectionService integration setup completed")
        }

        private fun showIncomingCallDialog(call: Call) {
            runOnUiThread {
            }
        }

        private fun initializeActivity() {
            // –í—ã–∑—ã–≤–∞–µ–º showMainContent() —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ webRTCClient
            runOnUiThread {
                showMainContent()
            }
        }

        override fun onResume() {
            super.onResume()
        }

        override fun onPause() {
            super.onPause()
//            if (isFinishing) {
//                webRTCClient?.disconnect()
//            }
        }

        override fun onDestroy() {
            super.onDestroy()
            stopRingtone()
            val myApp = application as MyApp
            myApp.setWebRTCActivityListener(null)
        }

        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è WebRTCClient.WebRTCListener - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        override fun onIncomingCall(callId: String, fromUserId: String) {
            handleIncomingCallInternal(fromUserId, callId)
        }

        private fun handleIncomingCallInternal(fromUserId: String, callId: String) {
            Log.d("WebRTC", "üìû Incoming call from: $fromUserId, callId: $callId")
            Log.d(
                "WebRTC",
                "üìû Activity state: isFinishing=${isFinishing}, isDestroyed=$isDestroyed"
            )

            runOnUiThread {
                Log.d("WebRTC", "üìû Updating UI with incoming call")
                _incomingCallState.value = IncomingCallState(
                    isIncomingCall = true,
                    fromUserId = fromUserId,
                    callId = callId
                )
                performVibration(1000)
                playRingtone()

                redirectToCallActivity(fromUserId, callId, true)
            }
        }


        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ WebRTCClient.WebRTCListener
        override fun onCallInitiated(callId: String) {
            Log.d("WebRTC", "üìû Call initiated: $callId")
        }

        override fun onCallAccepted(callId: String) {
            Log.d("WebRTC", "‚úÖ Call accepted: $callId")
            resetIncomingCallState()
        }

        override fun onCallRejected(callId: String) {
            Log.d("WebRTC", "‚ùå Call rejected: $callId")
            resetIncomingCallState()
        }

        override fun onCallEnded(callId: String) {
            Log.d("WebRTC", "üìû Call ended: $callId")
            resetIncomingCallState()
        }

        override fun onCallFailed(callId: String, error: String) {
            Log.d("WebRTC", "‚ùå Call failed: $callId - $error")
            resetIncomingCallState()
        }

        override fun onWebRTCConnected() {
            Log.d("WebRTC", "‚úÖ WebRTC connected")
        }

        override fun onWebRTCDisconnected() {
            Log.d("WebRTC", "üî¥ WebRTC disconnected")
        }

        override fun onIceConnectionStateChanged(state: PeerConnection.IceConnectionState) {
            Log.d("WebRTC", "‚ùÑÔ∏è ICE connection state: $state")
        }

        private fun initializeWebRTC() {
            try {
                val myApp = application as MyApp
                myApp.rootContactId.observe(this) { rootContactId ->
                    if (rootContactId != null && !isWebRTCInitialized) {
                        webRTCClient = WebRTCClient(
                            context = this,
                            serverUrl = "https://e65ea583-8f5e-4d58-9f20-58e16b4d9ba5-00-182nvjnxjskc1.sisko.replit.dev:3000",
                            userId = rootContactId,
                            listener = this
                        )
                        isWebRTCInitialized = true
                        Log.d("WebRTC", "‚úÖ WebRTC client initialized with ID: $rootContactId")
                    }
                }
            } catch (e: Exception) {
                Log.e("WebRTC", "‚ùå Error initializing WebRTC: ${e.message}")
            }
        }

        private fun redirectToCallActivity(
            targetUserId: String,
            callId: String,
            isIncoming: Boolean
        ) {
            val intent = Intent(this, com.ppnkdeapp.mycontacts.call.CallActivity::class.java).apply {
                // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ï–î–ò–ù–´–ï –ö–õ–Æ–ß–ò
                putExtra("call_id", callId)
                putExtra("caller_id", targetUserId)
                putExtra("is_incoming", isIncoming)
                putExtra("contact_name", targetUserId) // TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è

                flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
            }
            startActivity(intent)
            Log.d("ContactsList", "‚úÖ CallActivity started with CallId: $callId")
        }

        //    private fun redirectToCallActivity(targetUserId: String, callId: String, isIncoming: Boolean) {
        //        val intent = Intent(this, com.ppnkdeapp.mycontacts.call.CallActivity::class.java).apply {
        //            // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –ö–õ–Æ–ß–ò (—Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ –≤ MyApp.handleIncomingCall())
        //            putExtra("call_id", callId)
        //            putExtra("caller_id", targetUserId)
        //            putExtra("is_incoming", isIncoming)
        //            putExtra("contact_name", "–ö–æ–Ω—Ç–∞–∫—Ç—É") // –ò–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        //
        //            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
        //        }
        //        startActivity(intent)
        //        Log.d("ContactsList", "‚úÖ CallActivity started with correct data")
        //    }
        private fun startCallActivity(userId: String, isIncoming: Boolean) {
            val intent = Intent(this, com.ppnkdeapp.mycontacts.call.CallActivity::class.java).apply {
                putExtra("targetUserId", userId)
                putExtra("isIncomingCall", isIncoming)
            }
            startActivity(intent)
        }

        private fun performVibration(duration: Long) {
            val vibrator = getSystemService(Context.VIBRATOR_SERVICE) as Vibrator
            if (vibrator.hasVibrator()) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    vibrator.vibrate(
                        VibrationEffect.createOneShot(
                            duration,
                            VibrationEffect.DEFAULT_AMPLITUDE
                        )
                    )
                } else {
                    @Suppress("DEPRECATION")
                    vibrator.vibrate(duration)
                }
            }
        }

        private val _webSocketState = MutableLiveData<Boolean>(false)
        val webSocketState: LiveData<Boolean> get() = _webSocketState

        //        override fun onSocketConnected() {
//            Log.d("WebRTC", "‚úÖ Socket connected")
//            _webSocketState.postValue(true)
//        }
//
//        override fun onSocketDisconnected() {
//            Log.d("WebRTC", "üî¥ Socket disconnected")
//            _webSocketState.postValue(false)
//        }
        private fun playRingtone() {
            val notification: Uri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE)
            ringtone = RingtoneManager.getRingtone(applicationContext, notification)
            ringtone?.play()
        }

        private fun stopRingtone() {
            ringtone?.stop()
            ringtone = null
        }

        fun resetIncomingCallState() {
            _incomingCallState.value = IncomingCallState()
            stopRingtone()
        }

        fun acceptIncomingCall() {
            val myApp = application as MyApp
            incomingCallState.let { state ->
                if (state.isIncomingCall) {
                    myApp.acceptCall(state.fromUserId, state.callId)
                    resetIncomingCallState()
                    redirectToCallActivity(state.fromUserId, state.callId, true)
                }
            }
        }

        fun rejectIncomingCall() {
            val myApp = application as MyApp
            incomingCallState.let { state ->
                if (state.isIncomingCall) {
                    myApp.rejectCall(state.fromUserId, state.callId)
                    resetIncomingCallState()
                }
            }
        }

        private fun getRequiredPermissions(): Array<String> {
            return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                arrayOf(
                    Manifest.permission.READ_MEDIA_IMAGES,
                    Manifest.permission.READ_MEDIA_VIDEO,
                    Manifest.permission.RECORD_AUDIO,
                    Manifest.permission.MODIFY_AUDIO_SETTINGS,
                    Manifest.permission.INTERNET,
                    Manifest.permission.ACCESS_NETWORK_STATE,
                    Manifest.permission.WAKE_LOCK,
                    Manifest.permission.FOREGROUND_SERVICE,
                    Manifest.permission.POST_NOTIFICATIONS
                )
            } else {
                arrayOf(
                    Manifest.permission.READ_EXTERNAL_STORAGE,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE,
                    Manifest.permission.RECORD_AUDIO,
                    Manifest.permission.MODIFY_AUDIO_SETTINGS,
                    Manifest.permission.INTERNET,
                    Manifest.permission.ACCESS_NETWORK_STATE,
                    Manifest.permission.WAKE_LOCK,
                    Manifest.permission.FOREGROUND_SERVICE
                )
            }
        }

        private fun checkPermissions() {
            val requiredPermissions = getRequiredPermissions()

            val allPermissionsGranted = requiredPermissions.all { permission ->
                ContextCompat.checkSelfPermission(
                    this,
                    permission
                ) == PackageManager.PERMISSION_GRANTED
            }

            if (allPermissionsGranted) {
                showMainContent()
            } else {
                permissionLauncher.launch(requiredPermissions)
            }
        }

        private fun showMainContent() {
            setContent {
                MyContactsAppTheme {
                    ProvideWindowInsets {
                        webRTCClient?.let { client ->
                            ContactsListScreen(
                                webRTCClient = client,
                                incomingCallState = incomingCallState,
                                onAcceptCall = { acceptIncomingCall() },
                                onRejectCall = { rejectIncomingCall() }
                            )
                        } ?: run {
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏, –ø–æ–∫–∞ webRTCClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                            Box(
                                modifier = Modifier.fillMaxSize(),
                                contentAlignment = Alignment.Center
                            ) {
                                CircularProgressIndicator()
                            }
                        }
                    }
                }
            }
        }

        private fun showPermissionDeniedScreen() {
            setContent {
                MyContactsAppTheme {
                    ProvideWindowInsets {
                        PermissionDeniedScreen(
                            onRequestPermissions = { checkPermissions() }
                        )
                    }
                }
            }
        }

        //        fun callContact(contact: Contact) {
//            val targetUserId = contact.personal_id ?: return
//            val client = webRTCClient ?: run {
////                Toast.makeText(
////                    this,
////                    "‚ùå WebRTC –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
////                    Toast.LENGTH_SHORT
////                ).show()
//                return
//            }
//
//            Log.d("CALL_DEBUG", "=== üéØ CALL ATTEMPT ===")
//            Log.d("CALL_DEBUG", "üìû Target: ${contact.Name} (ID: $targetUserId)")
//
//            // üîÑ –í–´–ù–û–°–ò–ú –ü–†–û–í–ï–†–ö–£ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –í –ù–ê–ß–ê–õ–û
//            val isConnected = client.isSocketConnected()
//            val connectionStatus = client.getConnectionStatus()
//
//            Log.d("CALL_DEBUG", "üîå WebSocket: $isConnected")
//            Log.d("CALL_DEBUG", "üì° Status: $connectionStatus")
//
//            // üîÑ –ï–°–õ–ò –ù–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø - –ü–´–¢–ê–ï–ú–°–Ø –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø –ò –ñ–î–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–ê
//            if (!isConnected) {
//                Log.e("CALL_DEBUG", "‚ùå CANNOT CALL: WebSocket not connected")
//                Log.d("CALL_DEBUG", "üîÑ Attempting to reconnect...")
//
//                // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –∫–æ—Ä—É—Ç–∏–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI –ø–æ—Ç–æ–∫
//                CoroutineScope(Dispatchers.Main).launch {
//                    val reconnectSuccess = attemptReconnect()
//
//                    if (reconnectSuccess) {
//                        // ‚úÖ –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–ü–ï–®–ù–û - –ü–†–û–î–û–õ–ñ–ê–ï–ú –ó–í–û–ù–û–ö
//                        proceedWithCall(contact, targetUserId)
//                    } else {
//                        // ‚ùå –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ï –£–î–ê–õ–û–°–¨
//                        Toast.makeText(
//                            this@ContactsListActivity,
//                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
//                            Toast.LENGTH_SHORT
//                        ).show()
//                    }
//                }
//                return
//            }
//
//            // ‚úÖ –ï–°–õ–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –£–ñ–ï –ï–°–¢–¨ - –°–†–ê–ó–£ –ü–†–û–î–û–õ–ñ–ê–ï–ú
//            proceedWithCall(contact, targetUserId)
//        }
        fun callContact(contact: Contact) {
            val targetUserId = contact.personal_id ?: return
            
            Log.d("CALL_DEBUG", "=== üéØ CALL ATTEMPT ===")
            Log.d("CALL_DEBUG", "üìû Target: ${contact.Name} (ID: $targetUserId)")
            
            // –ü–æ–ª—É—á–∞–µ–º MyApp –∏ –≤—ã–∑—ã–≤–∞–µ–º initiateCall
            val myApp = application as MyApp
            myApp.initiateCall(targetUserId)
            
            Log.d("CALL_DEBUG", "‚úÖ Call initiated via MyApp.initiateCall()")
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            Toast.makeText(
                this,
                "üìû –ó–≤–æ–Ω–æ–∫ ${contact.Name}...",
                Toast.LENGTH_SHORT
            ).show()
        }

            // üîÑ –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –° –û–ñ–ò–î–ê–ù–ò–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–ê
//        private suspend fun attemptReconnect(): Boolean {
//            val myApp = application as MyApp
//            val client = myApp.getWebRTCClient()
//            return withContext(Dispatchers.IO) {
//                try {
//                    Log.d("CALL_DEBUG", "üîÑ Starting socket reconnection...")
//                    client.reconnectSocket()
//
//                    // üîÑ –ñ–î–ï–ú –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 —Å–µ–∫—É–Ω–¥)
//                    var attempts = 0
//                    val maxAttempts = 10 // 10 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 500–º—Å = 5 —Å–µ–∫—É–Ω–¥
//
//                    while (attempts < maxAttempts) {
//                        if (client.isSocketConnected()) {
//                            Log.d("CALL_DEBUG", "‚úÖ Socket reconnected successfully!")
//                            return@withContext true
//                        }
//                        delay(300) // –ñ–¥–µ–º 500–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
//                        attempts++
//                    }
//
//                    Log.e("CALL_DEBUG", "‚ùå Socket reconnection timeout")
//                    false
//                } catch (e: Exception) {
//                    Log.e("CALL_DEBUG", "‚ùå Reconnection error: ${e.message}")
//                    false
//                }
//            }
//        }

//            // üìû –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø –ó–í–û–ù–ö–ê –ü–û–°–õ–ï –ü–†–û–í–ï–†–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
//            private fun proceedWithCall(contact: Contact, targetUserId: String) {
//                val myApp = application as MyApp
//                val client = myApp.getWebRTCClient()
//                val callInitiated = callManager.makeCall(targetUserId, contact.Name ?: "")
//
//                Log.d("CALL_DEBUG", "üìû Call initiated: $callInitiated")

//            if (callInitiated) {
//                val currentCall = callManager.currentCall.value
//                val callId = currentCall?.callId ?: ""
//
//                Toast.makeText(this, "–ó–≤–æ–Ω–æ–∫ $targetUserId...", Toast.LENGTH_SHORT).show()
//                redirectToCallActivity(targetUserId, callId, false)
//            } else {
//                val msg = if (!client.isSocketConnected()) {
//                    "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
//                } else {
//                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤"
//                }
//                Toast.makeText(this, "‚ùå $msg", Toast.LENGTH_SHORT).show()
//            }
            }
            //    fun callContact(contact: Contact) {
            //        val targetUserId = contact.personal_id ?: return
            //
            //        Log.d("CALL_DEBUG", "=== üéØ CALL ATTEMPT ===")
            //        Log.d("CALL_DEBUG", "üìû Target: ${contact.Name} (ID: $targetUserId)")
            //
            //        val isConnected = webRTCClient.isSocketConnected()
            //        val connectionStatus = webRTCClient.getConnectionStatus()
            //
            //        Log.d("CALL_DEBUG", "üîå WebSocket: $isConnected")
            //        Log.d("CALL_DEBUG", "üì° Status: $connectionStatus")
            //
            //        if (!isConnected) {
            //            Log.e("CALL_DEBUG", "‚ùå CANNOT CALL: WebSocket not connected")
            //            Log.d("CALL_DEBUG", "üîÑ Attempting to reconnect...")
            //            webRTCClient.reconnectSocket()
            //            return
            //        }
            //
            //        val callInitiated = callManager.makeCall(targetUserId, contact.Name ?: "")
            //
            //        Log.d("CALL_DEBUG", "üìû Call initiated: $callInitiated")
            //
            //        if (callInitiated) {
            //            // ‚úÖ –ü–û–õ–£–ß–ê–ï–ú callId –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
            //            val currentCall = callManager.currentCall.value
            //            val callId = currentCall?.callId ?: ""
            //
            //            Toast.makeText(this, "–ó–≤–æ–Ω–æ–∫ $targetUserId...", Toast.LENGTH_SHORT).show()
            //            redirectToCallActivity(targetUserId, callId, false) // ‚úÖ –¢–µ–ø–µ—Ä—å —Å callId
            //        } else {
            //            val msg = if (!webRTCClient.isSocketConnected()) "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" else "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤"
            //            Toast.makeText(this, "‚ùå $msg", Toast.LENGTH_SHORT).show()
            //        }
            //    }
            //

//            override fun onRequestPermissionsResult(
//                requestCode: Int,
//                permissions: Array<out String>,
//                grantResults: IntArray
//            ) {
//                super.onRequestPermissionsResult(requestCode, permissions, grantResults)
//                checkPermissions()
//            }

        @Composable
        fun PermissionDeniedScreen(
            onRequestPermissions: () -> Unit
        ) {
            val context = LocalContext.current

            Surface(
                modifier = Modifier.fillMaxSize(),
                color = MaterialTheme.colors.background
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(32.dp),
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.Center
                ) {
                    Text(
                        text = "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
                        fontSize = 24.sp,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colors.primary,
                        textAlign = TextAlign.Center,
                        modifier = Modifier.padding(bottom = 16.dp)
                    )

                    Text(
                        text = "–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É. –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.",
                        fontSize = 16.sp,
                        color = MaterialTheme.colors.onBackground,
                        textAlign = TextAlign.Center,
                        modifier = Modifier.padding(bottom = 24.dp)
                    )

                    Button(
                        onClick = onRequestPermissions,
                        colors = ButtonDefaults.buttonColors(
                            backgroundColor = MaterialTheme.colors.primary,
                            contentColor = Color.White
                        )
                    ) {
                        Text(
                            text = "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–Ω–æ–≤–∞",
                            fontSize = 16.sp,
                            modifier = Modifier.padding(horizontal = 24.dp, vertical = 8.dp)
                        )
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    TextButton(
                        onClick = {
                            (context as? ContactsListActivity)?.finish()
                        }
                    ) {
                        Text(
                            text = "–í—ã–π—Ç–∏",
                            fontSize = 14.sp,
                            color = Color.Gray
                        )
                    }
                }
            }
        }

        @Composable
        fun ContactsListScreen(
            webRTCClient: WebRTCClient,
            incomingCallState: ContactsListActivity.IncomingCallState,
            onAcceptCall: () -> Unit,
            onRejectCall: () -> Unit
        ) {
            val context = LocalContext.current
            val activity = context as? ContactsListActivity
            val vibrator =
                remember { context.getSystemService(Context.VIBRATOR_SERVICE) as Vibrator }
            val myApp = MyApp.getInstance(context)
            val contacts by myApp.contactsLiveData.observeAsState(initial = emptyList())
            val serverConnectionState by myApp.serverConnectionState.observeAsState(initial = MyApp.ServerConnectionState.Disconnected)
            var showRootContactDialog by remember { mutableStateOf(false) }
            var showNewContactDialog by remember { mutableStateOf(false) }
            // CallManager –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

            // üî• –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
            var webSocketConnected by remember { mutableStateOf(false) }

            // üî• –î–û–ë–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            LaunchedEffect(Unit) {
                while (true) {
                    try {
//                    webSocketConnected = webRTCClient.isSocketConnected()
                    } catch (e: Exception) {
                        webSocketConnected = false
                    }
                    delay(1000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                }
            }

            val sortedContacts = remember(contacts) {
                contacts.sortedBy { it.Name ?: "" }
            }

            val rootContact = remember(sortedContacts) {
                sortedContacts.find { it.root_contact == true }
            }

            val animatedBackgroundColor by animateColorAsState(
                targetValue = if (rootContact != null) {
                    when (serverConnectionState) {
                        is MyApp.ServerConnectionState.Connected -> Color(0xE400BE4F)
                        else -> Color(0xFF414141)
                    }
                } else {
                    MaterialTheme.colors.primary
                },
                animationSpec = tween(durationMillis = 500),
                label = "backgroundColor"
            )

            fun performVibration() {
                if (vibrator.hasVibrator()) {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                        vibrator.vibrate(
                            VibrationEffect.createOneShot(
                                15,
                                VibrationEffect.DEFAULT_AMPLITUDE
                            )
                        )
                    } else {
                        @Suppress("DEPRECATION")
                        vibrator.vibrate(30)
                    }
                }
            }

            fun saveContact(updatedContact: Contact) {
                try {
                    myApp.updateContactByListId(updatedContact)
                    println("Contact successfully updated: ${updatedContact.Name} (ID: ${updatedContact.personal_id})")
                } catch (e: Exception) {
                    e.printStackTrace()
                    println("Error updating contact: ${e.message}")
                }
            }

            fun createNewContact(newContact: Contact) {
                try {
                    myApp.addContact(newContact)
                    println("New contact successfully created: ${newContact.Name}")
                } catch (e: Exception) {
                    e.printStackTrace()
                    println("Error creating new contact: ${e.message}")
                }
            }

            val activeContacts by myApp.myActiveContacts.observeAsState(initial = emptyList())

            Surface(
                modifier = Modifier.fillMaxSize(),
                color = MaterialTheme.colors.background
            ) {
                Scaffold(
                    modifier = Modifier.statusBarsPadding(),
                    topBar = {
                        TopAppBar(
                            title = {
                                Row(
                                    verticalAlignment = Alignment.CenterVertically,
                                    modifier = Modifier
                                        .clickable {
                                            if (rootContact != null) {
                                                performVibration()
                                                showRootContactDialog = true
                                            }
                                        }
                                        .padding(vertical = 8.dp)
                                ) {
                                    rootContact?.let { contact ->
                                        Row(
                                            verticalAlignment = Alignment.CenterVertically,
                                            modifier = Modifier.fillMaxWidth()
                                        ) {
                                            Text(
                                                text = contact.Name!!,
                                                fontSize = 18.sp,
                                                fontWeight = FontWeight.Medium,
                                                color = Color.White,
                                                modifier = Modifier
                                                    .padding(start = 4.dp)
                                                    .weight(1f)
                                            )

                                            // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
//                                        WebSocketIndicator(
//                                            isConnected = webSocketConnected,
//                                            onReconnect = {
//                                                webRTCClient.reconnectSocket()
//                                            }
//                                        )

                                            Text(
                                                text = "üë§",
                                                fontSize = 21.sp,
                                                modifier = Modifier.offset(x = (-10).dp)
                                            )
                                        }
                                    } ?: run {
                                        Text(
                                            text = "–ù–µ—Ç root –∫–æ–Ω—Ç–∞–∫—Ç–∞",
                                            fontSize = 16.sp,
                                            color = Color.White.copy(alpha = 0.8f),
                                            modifier = Modifier.padding(start = 4.dp)
                                        )
                                    }
                                }
                            },
                            backgroundColor = animatedBackgroundColor,
                            contentColor = Color.White,
                            elevation = 4.dp
                        )
                    },
                    floatingActionButton = {
                        Box(
                            modifier = Modifier
                                .fillMaxSize()
                                .padding(bottom = 30.dp),
                            contentAlignment = Alignment.BottomEnd
                        ) {
                            FloatingActionButton(
                                onClick = {
                                    performVibration()
                                    showNewContactDialog = true
                                },
                                backgroundColor = MaterialTheme.colors.primary,
                                contentColor = Color.White,
                                modifier = Modifier.padding(end = 16.dp, bottom = 16.dp)
                            ) {
                                Text(
                                    text = "+",
                                    fontSize = 24.sp,
                                    fontWeight = FontWeight.Bold
                                )
                            }
                        }
                    },
                    floatingActionButtonPosition = FabPosition.End,
                    isFloatingActionButtonDocked = false,
                    content = { paddingValues ->
                        Column(
                            modifier = Modifier.fillMaxSize()
                        ) {
                            MyContactsList(
                                modifier = Modifier
                                    .weight(1f)
                                    .padding(paddingValues),
                                rootContact = rootContact,
                                serverConnectionState = serverConnectionState,
                                activeContacts = activeContacts,
                                webRTCClient = webRTCClient,
                                onCallContact = { contact ->
                                    activity?.callContact(contact)
                                }
                            )
                        }
                    }
                )
            }

            if (showRootContactDialog && rootContact != null) {
                ContactEditDialog(
                    contact = rootContact,
                    onDismiss = { showRootContactDialog = false },
                    onSave = { updatedContact ->
                        saveContact(updatedContact)
                    },
                    onDelete = { contactToDelete ->
                        myApp.deleteContactByListId(contactToDelete)
                    }
                )
            }

            if (showNewContactDialog) {
                ContactEditDialog(
                    contact = Contact(
                        personal_id = null,
                        Name = "",
                        email = "",
                        group_id = null,
                        root_contact = false,
                        list_id = null
                    ),
                    onDismiss = { showNewContactDialog = false },
                    onSave = { newContact ->
                        createNewContact(newContact)
                    },
                    onDelete = { }
                )
            }
        }

        // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ WebSocket
        @Composable
        fun WebSocketIndicator(
            isConnected: Boolean,
            onReconnect: () -> Unit
        ) {
            val connectionColor = if (isConnected) Color(0xFF00FF00) else Color(0xFFFF0000)
            val connectionText = if (isConnected) "‚úÖ" else "üî¥"
            val tooltipText =
                if (isConnected) "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É" else "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"

            Box(
                modifier = Modifier
                    .padding(horizontal = 8.dp)
                    .clickable(
                        enabled = !isConnected,
                        onClick = onReconnect
                    )
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.padding(4.dp)
                ) {
                    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    Box(
                        modifier = Modifier
                            .size(12.dp)
                            .background(
                                color = connectionColor,
                                shape = CircleShape
                            )
                    )

                    // –¢–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω)
                    Text(
                        text = connectionText,
                        fontSize = 14.sp,
                        color = Color.White,
                        modifier = Modifier.padding(start = 4.dp)
                    )
                }

                // Tooltip –ø—Ä–∏ –¥–æ–ª–≥–æ–º –Ω–∞–∂–∞—Ç–∏–∏
                if (!isConnected) {
                    Text(
                        text = "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                        color = Color.White,
                        fontSize = 10.sp,
                        modifier = Modifier
                            .align(Alignment.BottomCenter)
                            .offset(y = 20.dp)
                            .background(Color.Black.copy(alpha = 0.7f))
                            .padding(4.dp)
                    )
                }
            }
        }

        // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
        @Composable
        fun SimpleWebSocketIndicator(isConnected: Boolean) {
            val indicatorColor = if (isConnected) Color.Green else Color.Red
            val tooltip = if (isConnected) "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ" else "–û—Ç–∫–ª—é—á–µ–Ω–æ"

            TooltipArea(
                tooltip = {
                    Surface(
                        color = Color.Black.copy(alpha = 0.8f),
                        shape = RoundedCornerShape(4.dp)
                    ) {
                        Text(
                            text = tooltip,
                            color = Color.White,
                            fontSize = 12.sp,
                            modifier = Modifier.padding(4.dp)
                        )
                    }
                }
            ) {
                Box(
                    modifier = Modifier
                        .size(16.dp)
                        .background(
                            color = indicatorColor,
                            shape = CircleShape
                        )
                        .padding(4.dp)
                )
            }
        }

        @Composable
        fun TooltipArea(tooltip: @Composable () -> Unit, content: @Composable () -> Unit) {
            TODO("Not yet implemented")
        }
//    @Composable
//    fun ContactsListScreen(
//        webRTCClient: WebRTCClient,
//        incomingCallState: ContactsListActivity.IncomingCallState,
//        onAcceptCall: () -> Unit,
//        onRejectCall: () -> Unit
//    ) {
//        val context = LocalContext.current
//        val activity = context as? ContactsListActivity
//        val vibrator = remember { context.getSystemService(Context.VIBRATOR_SERVICE) as Vibrator }
//        val myApp = MyApp.getInstance(context)
//        val contacts by myApp.contactsLiveData.observeAsState(initial = emptyList())
//        val serverConnectionState by myApp.serverConnectionState.observeAsState(initial = MyApp.ServerConnectionState.Disconnected)
//        var showRootContactDialog by remember { mutableStateOf(false) }
//        var showNewContactDialog by remember { mutableStateOf(false) }
//        val currentCall by myApp.getCallManager().currentCall.observeAsState()
//
//        val sortedContacts = remember(contacts) {
//            contacts.sortedBy { it.Name ?: "" }
//        }
//
//        val rootContact = remember(sortedContacts) {
//            sortedContacts.find { it.root_contact == true }
//        }
//
//        val animatedBackgroundColor by animateColorAsState(
//            targetValue = if (rootContact != null) {
//                when (serverConnectionState) {
//                    is MyApp.ServerConnectionState.Connected -> Color(0xE400BE4F)
//                    else -> Color(0xFF414141)
//                }
//            } else {
//                MaterialTheme.colors.primary
//            },
//            animationSpec = tween(durationMillis = 500),
//            label = "backgroundColor"
//        )
//
//        fun performVibration() {
//            if (vibrator.hasVibrator()) {
//                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
//                    vibrator.vibrate(
//                        VibrationEffect.createOneShot(
//                            15,
//                            VibrationEffect.DEFAULT_AMPLITUDE
//                        )
//                    )
//                } else {
//                    @Suppress("DEPRECATION")
//                    vibrator.vibrate(30)
//                }
//            }
//        }
//
//        fun saveContact(updatedContact: Contact) {
//            try {
//                myApp.updateContactByListId(updatedContact)
//                println("Contact successfully updated: ${updatedContact.Name} (ID: ${updatedContact.personal_id})")
//            } catch (e: Exception) {
//                e.printStackTrace()
//                println("Error updating contact: ${e.message}")
//            }
//        }
//
//        fun createNewContact(newContact: Contact) {
//            try {
//                myApp.addContact(newContact)
//                println("New contact successfully created: ${newContact.Name}")
//            } catch (e: Exception) {
//                e.printStackTrace()
//                println("Error creating new contact: ${e.message}")
//            }
//        }
//
//        val activeContacts by myApp.myActiveContacts.observeAsState(initial = emptyList())
//
//        Surface(
//            modifier = Modifier.fillMaxSize(),
//            color = MaterialTheme.colors.background
//        ) {
//            Scaffold(
//                modifier = Modifier.statusBarsPadding(),
//                topBar = {
//                    TopAppBar(
//                        title = {
//                            Row(
//                                verticalAlignment = Alignment.CenterVertically,
//                                modifier = Modifier
//                                    .clickable {
//                                        if (rootContact != null) {
//                                            performVibration()
//                                            showRootContactDialog = true
//                                        }
//                                    }
//                                    .padding(vertical = 8.dp)
//                            ) {
//                                rootContact?.let { contact ->
//                                    Row(
//                                        verticalAlignment = Alignment.CenterVertically,
//                                        modifier = Modifier.fillMaxWidth()
//                                    ) {
//                                        Text(
//                                            text = contact.Name!!,
//                                            fontSize = 18.sp,
//                                            fontWeight = FontWeight.Medium,
//                                            color = Color.White,
//                                            modifier = Modifier
//                                                .padding(start = 4.dp)
//                                                .weight(1f)
//                                        )
//                                        Text(
//                                            text = "üë§",
//                                            fontSize = 21.sp,
//                                            modifier = Modifier.offset(x = (-10).dp)
//                                        )
//                                    }
//                                } ?: run {
//                                    Text(
//                                        text = "–ù–µ—Ç root –∫–æ–Ω—Ç–∞–∫—Ç–∞",
//                                        fontSize = 16.sp,
//                                        color = Color.White.copy(alpha = 0.8f),
//                                        modifier = Modifier.padding(start = 4.dp)
//                                    )
//                                }
//                            }
//                        },
//                        backgroundColor = animatedBackgroundColor,
//                        contentColor = Color.White,
//                        elevation = 4.dp
//                    )
//                },
//                floatingActionButton = {
//                    Box(
//                        modifier = Modifier
//                            .fillMaxSize()
//                            .padding(bottom = 30.dp),
//                        contentAlignment = Alignment.BottomEnd
//                    ) {
//                        FloatingActionButton(
//                            onClick = {
//                                performVibration()
//                                showNewContactDialog = true
//                            },
//                            backgroundColor = MaterialTheme.colors.primary,
//                            contentColor = Color.White,
//                            modifier = Modifier.padding(end = 16.dp, bottom = 16.dp)
//                        ) {
//                            Text(
//                                text = "+",
//                                fontSize = 24.sp,
//                                fontWeight = FontWeight.Bold
//                            )
//                        }
//                    }
//                },
//                floatingActionButtonPosition = FabPosition.End,
//                isFloatingActionButtonDocked = false,
//                content = { paddingValues ->
//                    Column(
//                        modifier = Modifier.fillMaxSize()
//                    ) {
//                        MyContactsList(
//                            modifier = Modifier
//                                .weight(1f)
//                                .padding(paddingValues),
//                            rootContact = rootContact,
//                            serverConnectionState = serverConnectionState,
//                            activeContacts = activeContacts,
//                            webRTCClient = webRTCClient,
//                            onCallContact = { contact ->
//                                activity?.callContact(contact)
//                            }
//                        )
//                    }
//                }
//            )
//
//    //
//        }
//
//        if (showRootContactDialog && rootContact != null) {
//            ContactEditDialog(
//                contact = rootContact,
//                onDismiss = { showRootContactDialog = false },
//                onSave = { updatedContact ->
//                    saveContact(updatedContact)
//                },
//                onDelete = { contactToDelete ->
//                    myApp.deleteContactByListId(contactToDelete)
//                }
//            )
//        }
//
//        if (showNewContactDialog) {
//            ContactEditDialog(
//                contact = Contact(
//                    personal_id = null,
//                    Name = "",
//                    email = "",
//                    group_id = null,
//                    root_contact = false,
//                    list_id = null
//                ),
//                onDismiss = { showNewContactDialog = false },
//                onSave = { newContact ->
//                    createNewContact(newContact)
//                },
//                onDelete = { }
//            )
//        }
//    }

        @Composable
        fun IncomingCallDialog(
            fromUserId: String,
            callerId: String,
            callId: String,
            onAccept: () -> Unit,
            onReject: () -> Unit
        ) {
            val context = LocalContext.current
            val onAccept = {
                //        Log.d("Call", "‚úÖ –ü—Ä–∏–Ω—è—Ç –≤—ã–∑–æ–≤ –æ—Ç $callerId")
                val myApp = MyApp.getInstance(context)
                myApp.acceptCall(callerId, callId)
                //        Toast.makeText(context, "–†–∞–∑–≥–æ–≤–æ—Ä –Ω–∞—á–∞—Ç", Toast.LENGTH_SHORT).show()
            }

            LaunchedEffect(key1 = callId) {
                delay(30000L)
                if (true) {
                    onReject()
                    //            Toast.makeText(context, "–ó–≤–æ–Ω–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω", Toast.LENGTH_SHORT).show()
                }
            }

            //    AlertDialog(
            //        onDismissRequest = {
            //        },
            //        title = {
            //            Text(
            //                text = "üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫",
            //                fontSize = 20.sp,
            //                fontWeight = FontWeight.Bold
            //            )
            //        },
            //        text = {
            //            Column {
            //                Text("–í–∞–º –∑–≤–æ–Ω–∏—Ç:", fontSize = 16.sp)
            //                Text(
            //                    text = fromUserId,
            //                    fontSize = 18.sp,
            //                    fontWeight = FontWeight.Bold,
            //                    color = MaterialTheme.colors.primary,
            //                    modifier = Modifier.padding(top = 8.dp)
            //                )
            //            }
            //        },
            //        confirmButton = {
            //            Button(
            //                onClick = onAccept,
            //                colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFF4CAF50)),
            //                modifier = Modifier.fillMaxWidth()
            //            ) {
            //                Text("–ü—Ä–∏–Ω—è—Ç—å", color = Color.White, fontSize = 16.sp)
            //            }
            //        },
            //        dismissButton = {
            //            Button(
            //                onClick = onReject,
            //                colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFFF44336)),
            //                modifier = Modifier.fillMaxWidth()
            //            ) {
            //                Text("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", color = Color.White, fontSize = 16.sp)
            //            }
            //        }
            //    )
        }

        @Composable
        fun ActiveCallDialog(
            call: Call,
            onEndCall: () -> Unit,
            onToggleMute: () -> Unit,
            onToggleSpeaker: () -> Unit
        ) {
            val context = LocalContext.current

            AlertDialog(
                onDismissRequest = {
                },
                title = {
                    Text(
                        text = "üìû –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä",
                        fontSize = 20.sp,
                        fontWeight = FontWeight.Bold
                    )
                },
                text = {
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text(
                            text = "–†–∞–∑–≥–æ–≤–æ—Ä —Å:",
                            fontSize = 16.sp,
                            modifier = Modifier.padding(bottom = 8.dp)
                        )
                        Text(
                            text = call.fromUserName,
                            fontSize = 22.sp,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colors.primary,
                            modifier = Modifier.padding(bottom = 16.dp)
                        )

                        var callDuration by remember { mutableStateOf(0) }

                        LaunchedEffect(key1 = call.callId) {
                            while (true) {
                                delay(1000)
                                callDuration++
                            }
                        }

                        Text(
                            text = "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${callDuration / 60}:${
                                String.format(
                                    "%02d",
                                    callDuration % 60
                                )
                            }",
                            fontSize = 14.sp,
                            color = Color.Gray
                        )
                    }
                },
                buttons = {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(horizontal = 16.dp)
                    ) {
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceEvenly
                        ) {
                            IconButton(
                                onClick = onToggleMute,
                                modifier = Modifier.size(60.dp)
                            ) {
                                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                                    Icon(
                                        imageVector = Icons.Default.Mic,
                                        contentDescription = "–ú–∏–∫—Ä–æ—Ñ–æ–Ω",
                                        tint = MaterialTheme.colors.primary,
                                        modifier = Modifier.size(30.dp)
                                    )
                                    Text("–í—ã–∫–ª", fontSize = 12.sp)
                                }
                            }

                            IconButton(
                                onClick = onToggleSpeaker,
                                modifier = Modifier.size(60.dp)
                            ) {
                                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                                    Icon(
                                        imageVector = Icons.Default.VolumeUp,
                                        contentDescription = "–î–∏–Ω–∞–º–∏–∫",
                                        tint = MaterialTheme.colors.primary,
                                        modifier = Modifier.size(30.dp)
                                    )
                                    Text("–î–∏–Ω–∞–º–∏–∫", fontSize = 12.sp)
                                }
                            }
                        }

                        Spacer(modifier = Modifier.height(16.dp))

                        Button(
                            onClick = onEndCall,
                            colors = ButtonDefaults.buttonColors(backgroundColor = Color(0xFFF44336)),
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(50.dp)
                        ) {
                            Text("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫", color = Color.White, fontSize = 16.sp)
                        }
                    }
                }
            )
        }

        @Composable
        fun MyContactsList(
            modifier: Modifier = Modifier,
            rootContact: Contact? = null,
            serverConnectionState: MyApp.ServerConnectionState = MyApp.ServerConnectionState.Disconnected,
            activeContacts: List<Contact> = emptyList(),
            webRTCClient: WebRTCClient,
            onCallContact: (Contact) -> Unit
        ) {
            val context = LocalContext.current
            val myApp = MyApp.getInstance(context)
            val contacts by myApp.contactsLiveData.observeAsState(initial = emptyList())

            LaunchedEffect(Unit) {
                myApp.refreshContacts()
            }

            val filteredContacts = remember(contacts, rootContact, activeContacts) {
                if (rootContact != null) {
                    contacts.filter { it.personal_id != rootContact.personal_id }
                } else {
                    contacts
                }
            }

            val sortedContacts = remember(filteredContacts, activeContacts) {
                val activeContactIds = activeContacts.map { it.personal_id }.toSet()
                filteredContacts.sortedWith(
                    compareBy(
                    { contact -> !activeContactIds.contains(contact.personal_id) },
                    { contact -> contact.Name ?: "" }
                ))
            }

            if (sortedContacts.isEmpty()) {
                Box(
                    modifier = modifier
                        .fillMaxSize()
                        .padding(16.dp),
                    contentAlignment = Alignment.Center
                ) {
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally,
                        verticalArrangement = Arrangement.Center
                    ) {
                        Text(
                            text = "–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                            fontSize = 16.sp,
                            color = Color.Gray,
                            modifier = Modifier.padding(bottom = 8.dp)
                        )
                        Text(
                            text = "–ó–∞–≥—Ä—É–∂–∞–µ–º...",
                            fontSize = 14.sp,
                            color = Color.LightGray
                        )
                    }
                }
            } else {
                LazyColumn(
                    modifier = modifier
                        .fillMaxSize()
                        .padding(bottom = 15.dp)
                ) {
                    items(sortedContacts) { contact ->
                        ContactListItem(
                            contact = contact,
                            activeContacts = activeContacts,
                            webRTCClient = webRTCClient,
                            onCallContact = onCallContact
                        )
                        Divider(
                            color = Color.LightGray,
                            thickness = 0.5.dp,
                            modifier = Modifier.padding(start = 16.dp)
                        )
                    }
                }
            }
        }

        @Composable
        fun ContactListItem(
            contact: Contact,
            activeContacts: List<Contact> = emptyList(),
            webRTCClient: WebRTCClient,
            onCallContact: (Contact) -> Unit
        ) {
            val context = LocalContext.current
            val vibrator =
                remember { context.getSystemService(Context.VIBRATOR_SERVICE) as Vibrator }
            var showEditDialog by remember { mutableStateOf(false) }
            val myApp = MyApp.getInstance(context)

            val isContactActive = remember(contact, activeContacts) {
                activeContacts.any { activeContact ->
                    activeContact.personal_id == contact.personal_id
                }
            }

            fun performVibration() {
                if (vibrator.hasVibrator()) {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                        vibrator.vibrate(
                            VibrationEffect.createOneShot(
                                30,
                                VibrationEffect.DEFAULT_AMPLITUDE
                            )
                        )
                    } else {
                        @Suppress("DEPRECATION")
                        vibrator.vibrate(30)
                    }
                }
            }

            fun saveContact(updatedContact: Contact) {
                try {
                    myApp.updateContactByListId(updatedContact)
                    println("Contact successfully updated: ${updatedContact.Name} (ID: ${updatedContact.personal_id})")
                } catch (e: Exception) {
                    e.printStackTrace()
                    println("Error updating contact: ${e.message}")
                }
            }

            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 15.dp, vertical = 10.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                if (isContactActive) {
                    Box(
                        modifier = Modifier
                            .size(15.dp)
                            .background(
                                color = Color(0xFF00FF00),
                                shape = androidx.compose.foundation.shape.CircleShape
                            )
                    )
                    Spacer(modifier = Modifier.width(15.dp))
                } else {
                    Spacer(modifier = Modifier.width(24.dp))
                }

                Column(
                    modifier = Modifier
                        .weight(1f)
                        .clickable {
                            performVibration()
                            showEditDialog = true
                        }
                ) {
                    Text(
                        text = contact.Name!!,
                        style = MaterialTheme.typography.body1,
                        fontWeight = FontWeight.Medium,
                        fontSize = 16.sp
                    )
                    Text(
                        text = contact.email!!,
                        style = MaterialTheme.typography.body2,
                        color = Color.Gray,
                        fontSize = 14.sp
                    )
                }

                IconButton(
                    onClick = {
                        performVibration()
                        onCallContact(contact)
                    },
                    modifier = Modifier
                        .size(48.dp)
                        .padding(4.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.Call,
                        contentDescription = "–ü–æ–∑–≤–æ–Ω–∏—Ç—å",
                        tint = MaterialTheme.colors.primary,
                        modifier = Modifier.size(24.dp)
                    )
                }
                IconButton(
                    onClick = {
                        performVibration()
//                    onCallContact(contact)
                    },
                    modifier = Modifier
                        .size(48.dp)
                        .padding(4.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.Message,
                        contentDescription = "–°–æ–æ–±—â–µ–Ω–∏–µ",
                        tint = MaterialTheme.colors.primary,
                        modifier = Modifier.size(24.dp)
                    )
                }
                Text(
                    text = "üìò",
                    modifier = Modifier.padding(start = 8.dp),
                    fontSize = 16.sp
                )
            }

            if (showEditDialog) {
                ContactEditDialog(
                    contact = contact,
                    onDismiss = { showEditDialog = false },
                    onSave = { updatedContact ->
                        saveContact(updatedContact)
                    },
                    onDelete = { contactToDelete ->
                        myApp.deleteContactByListId(contactToDelete)
                    }
                )
            }
        }

        @Composable
        fun MyContactsAppTheme(
            content: @Composable () -> Unit
        ) {
            MaterialTheme(
                colors = lightColors(
                    primary = Color(0xFF2196F3),
                    primaryVariant = Color(0xFF1976D2),
                    secondary = Color(0xFF03DAC6),
                    background = Color.White,
                    surface = Color.White,
                    onPrimary = Color.White,
                    onSecondary = Color.Black,
                    onBackground = Color.Black,
                    onSurface = Color.Black,
                ),
                content = content
            )
        }

        @Preview(showBackground = true)
        @Composable
        fun DefaultPreview() {
            MyContactsAppTheme {
                val dummyWebRTCClient = object : WebRTCClient.WebRTCListener {
                    override fun onCallInitiated(callId: String) {}
                    override fun onCallAccepted(callId: String) {}
                    override fun onCallRejected(callId: String) {}
                    override fun onCallEnded(callId: String) {}
                    override fun onCallFailed(callId: String, error: String) {}
                    override fun onIncomingCall(callId: String, fromUserId: String) {}
                    override fun onWebRTCConnected() {}
                    override fun onWebRTCDisconnected() {}
                    override fun onIceConnectionStateChanged(state: PeerConnection.IceConnectionState) {}
                }

                ContactsListScreen(
                    webRTCClient = WebRTCClient(
                        context = androidx.compose.ui.platform.LocalContext.current,
                        serverUrl = "preview_server",
                        userId = "preview_user",
                        listener = dummyWebRTCClient
                    ),
                    incomingCallState = ContactsListActivity.IncomingCallState(),
                    onAcceptCall = {},
                    onRejectCall = {}
                )
            }
        }

        @Preview(showBackground = true)
        @Composable
        fun PermissionDeniedPreview() {
            MyContactsAppTheme {
                PermissionDeniedScreen(onRequestPermissions = {})
            }
        }


    //@Preview(showBackground = true)
    //@Composable
    //fun IncomingCallDialogPreview() {
    //    MyContactsAppTheme {
    //        IncomingCallDialog(
    //            fromUserId = "test_user",
    //            callId = "test_call_123",
    //            callerId = "test_call_123",
    //            onAccept = {},
    //            onReject = {}
    //        )
    //    }
    //}





