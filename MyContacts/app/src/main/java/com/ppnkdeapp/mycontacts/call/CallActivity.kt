package com.ppnkdeapp.mycontacts.call

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.media.RingtoneManager
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.os.VibrationEffect
import android.os.Vibrator
import android.util.Log
import android.view.WindowManager
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Call
import androidx.compose.material.icons.filled.CallEnd
import androidx.compose.material.icons.filled.Mic
import androidx.compose.material.icons.filled.MicOff
import androidx.compose.material.icons.filled.VolumeUp
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsControllerCompat
import com.ppnkdeapp.mycontacts.MyApp
import com.ppnkdeapp.mycontacts.call.ActualCall
import com.ppnkdeapp.mycontacts.call.CallService
import com.ppnkdeapp.mycontacts.call.WebRTCClient
import kotlinx.coroutines.delay
import java.util.concurrent.TimeUnit
import org.webrtc.PeerConnection

class CallActivity : ComponentActivity() {

    private lateinit var app: MyApp
    private var callId: String? = null
    private var callerId: String? = null
    private var isIncomingCall: Boolean = false
    private var contactName: String = ""

    private var vibrator: Vibrator? = null
    private var ringtone: android.media.Ringtone? = null
    
    // üî• –ù–û–í–û–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è currentActualCall
    private var currentActualCall: ActualCall? = null
    private var actualCallCallback: ((ActualCall?) -> Unit)? = null

    companion object {
        private const val PERMISSION_REQUEST_CODE = 123
        private const val TAG = "CallActivity"
        
        // üî• SINGLETON: –ó–∞–ø—Ä–µ—â–∞–µ–º –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ CallActivity
        @Volatile
        private var instance: CallActivity? = null
        
        fun isAlreadyRunning(): Boolean {
            return instance != null
        }
        
        fun getInstance(): CallActivity? {
            return instance
        }
    }
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // üî• SINGLETON: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ CallActivity
        if (isAlreadyRunning()) {
            Log.w(TAG, "‚ö†Ô∏è CallActivity already running, finishing this instance")
            finish()
            return
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        instance = this
        
        app = MyApp.getInstance(this)

        // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•
        Log.d(TAG, "üì± Intent received: ${intent?.action}")
        Log.d(TAG, "üì± Intent extras: ${intent?.extras?.keySet()}")

        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞
        callId = intent?.getStringExtra("call_id")
        callerId = intent?.getStringExtra("caller_id")
        isIncomingCall = intent?.getBooleanExtra("is_incoming", false) ?: false
        contactName = intent?.getStringExtra("contact_name") ?: getContactName(callerId)
        
        // üî• –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–≤–æ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ActualCall
        determineCallType()

        // ‚úÖ –ï–°–õ–ò callId –ü–£–°–¢–û–ô - –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if (callId.isNullOrEmpty()) {
            Log.w(TAG, "‚ö†Ô∏è callId is empty, checking alternative sources")

            // CallManager –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        }

        // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
        if (callId.isNullOrEmpty() || callerId.isNullOrEmpty()) {
            Log.e(TAG, "‚ùå CRITICAL: Missing call data! callId: $callId, callerId: $callerId")
            Toast.makeText(this, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", Toast.LENGTH_LONG).show()
            finish()
            return
        }

        setupWebRTCListener()
        setupActualCallObserver()
        makeFullScreen()
        vibrator = getSystemService(Vibrator::class.java)

        setContent {
            FullScreenCallUI(
                isIncomingCall = isIncomingCall,
                contactName = contactName,
                isWebRTCConnected = isWebRTCConnected,
                onAcceptCall = { acceptCall() },
                onEndCall = { endCall() },
                onToggleMute = { toggleMute() },
                onToggleSpeaker = { toggleSpeaker() }
            )
        }

        if (isIncomingCall) {
            startRinging()
        } else {
            startOutgoingCall()
        }
    }
    // üî• –ù–û–í–û–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    private var isWebRTCConnected = false

    private fun setupWebRTCListener() {
        app.setWebRTCActivityListener(object : WebRTCClient.WebRTCListener {
            override fun onCallAccepted(callId: String) {
                Log.d(TAG, "‚úÖ Call accepted - connection established!")
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å UI –∫–æ–≥–¥–∞ –∑–≤–æ–Ω–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω
            }

            override fun onCallFailed(callId: String, error: String) {
                Log.e(TAG, "‚ùå Call failed: $error")
                runOnUiThread {
                    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    finish()
                }
            }

            override fun onCallEnded(callId: String) {
                Log.d(TAG, "üìû Call ended: $callId")
                runOnUiThread {
                    stopRinging()
                    finish()
                }
            }

            override fun onWebRTCConnected() {
                Log.d(TAG, "üåê WebRTC connected - starting call timer")
                runOnUiThread {
                    isWebRTCConnected = true
                    Log.d(TAG, "üåê isWebRTCConnected set to true in CallActivity")
                }
            }

            override fun onWebRTCDisconnected() {
                Log.d(TAG, "üåê WebRTC disconnected")
                runOnUiThread {
                    isWebRTCConnected = false
                }
            }

            override fun onIceConnectionStateChanged(state: PeerConnection.IceConnectionState) {
                Log.d(TAG, "üßä ICE connection state changed: $state")
                
                runOnUiThread {
                    when (state) {
                        PeerConnection.IceConnectionState.CONNECTED -> {
                            Log.d(TAG, "‚úÖ ICE connection established - waiting for microphones")
                            // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isWebRTCConnected –∑–¥–µ—Å—å - –∂–¥–µ–º onWebRTCConnected()
                        }
                        PeerConnection.IceConnectionState.DISCONNECTED,
                        PeerConnection.IceConnectionState.FAILED,
                        PeerConnection.IceConnectionState.CLOSED -> {
                            Log.w(TAG, "‚ùå ICE connection lost")
                            isWebRTCConnected = false
                        }
                        else -> {
                            // –î—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (CONNECTING, CHECKING) - –Ω–µ –º–µ–Ω—è–µ–º isWebRTCConnected
                        }
                    }
                }
            }

            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            override fun onIncomingCall(callId: String, fromUserId: String) {}
            override fun onCallInitiated(callId: String) {}
            override fun onCallRejected(callId: String) {}
        })
    }
    //
    private fun acceptCall() {
        Log.d(TAG, "‚úÖ Accepting call with audio permission check")
        stopRinging()

        requestAudioPermissions { granted ->
            if (granted) {
                // üî• –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ActualCall —Å step = accept_call
                sendActualCallToServer("accept_call")
                Log.d(TAG, "üì§ Call acceptance sent to server")
            } else {
                Log.e(TAG, "‚ùå Audio permissions denied")
                finish()
            }
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û–∂–∏–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
//    private fun acceptCall() {
//        Log.d(TAG, "‚úÖ Accepting call directly via WebRTCClient")
//        stopRinging()
//
//        // ‚úÖ –ü–†–Ø–ú–û–ô –í–´–ó–û–í WebRTCClient - –û–ë–•–û–î–ò–ú CallManager
//        if (app.isWebRTCInitialized()) {
//            callerId?.let { callerId ->
//                callId?.let { callId ->
//                    app.getWebRTCClient().acceptCall(callerId, callId)
//                    Log.d(TAG, "üìû WebRTCClient.acceptCall() executed - waiting for audio session...")
//
//                    // UI –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç onCallAccepted
//                }
//            }
//        } else {
//            Log.e(TAG, "‚ùå WebRTC not initialized")
//        }
//    }
//    private fun acceptCall() {
//        Log.d(TAG, "‚úÖ Accepting call via CallManager")
//        stopRinging()
//
//        requestAudioPermissions { granted ->
//            if (granted) {
//                callerId?.let { callerId ->
//                    callId?.let { callId ->
//                        // ‚úÖ –ü–†–Ø–ú–û–ô –í–´–ó–û–í WebRTCClient –≤–º–µ—Å—Ç–æ CallManager
//                        if (app.isWebRTCInitialized()) {
//                            app.getWebRTCClient().acceptCall(callerId, callId)
//                            Log.d(TAG, "üìû WebRTCClient.acceptCall() executed directly")
//
//                            // –û–±–Ω–æ–≤–ª—è–µ–º UI
//                            // isCallActive = true
//                            // callStatus = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..."
//                        } else {
//                            Log.e(TAG, "‚ùå WebRTC not initialized")
//                        }
//                    }
//                }
//            } else {
//                Log.e(TAG, "‚ùå Audio permissions denied")
//                finish()
//            }
//        }
//    }

    private fun makeFullScreen() {
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
        window.setFlags(
            WindowManager.LayoutParams.FLAG_FULLSCREEN,
            WindowManager.LayoutParams.FLAG_FULLSCREEN
        )

        // –î–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π Android
        WindowCompat.setDecorFitsSystemWindows(window, false)

        val windowInsetsController = WindowCompat.getInsetsController(window, window.decorView)
        windowInsetsController.apply {
            hide(androidx.core.view.WindowInsetsCompat.Type.systemBars())
            systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE
        }
    }

    @Composable
    fun FullScreenCallUI(
        isIncomingCall: Boolean,
        contactName: String,
        isWebRTCConnected: Boolean,
        onAcceptCall: () -> Unit,
        onEndCall: () -> Unit,
        onToggleMute: () -> Unit,
        onToggleSpeaker: () -> Unit
    ) {
        var callStatus by remember { mutableStateOf("") }
        var callDuration by remember { mutableLongStateOf(0L) }
        var isMuted by remember { mutableStateOf(false) }
        var isSpeakerOn by remember { mutableStateOf(false) }
        var isCallActive by remember { mutableStateOf(!isIncomingCall) }

        // üî• –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        LaunchedEffect(isWebRTCConnected) {
            Log.d(TAG, "‚è∞ LaunchedEffect triggered - isWebRTCConnected: $isWebRTCConnected")
            if (isWebRTCConnected) {
                Log.d(TAG, "‚è∞ Starting call duration timer - WebRTC connected")
                while (true) {
                    delay(1000)
                    callDuration++
                    callStatus = formatDuration(callDuration)
                    Log.d(TAG, "‚è∞ Timer tick: $callStatus")
                }
            }
        }

        // üî• –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è WebRTC
        LaunchedEffect(isCallActive, isWebRTCConnected) {
            Log.d(TAG, "üîÑ Status update - isCallActive: $isCallActive, isWebRTCConnected: $isWebRTCConnected")
            when {
                isIncomingCall && !isCallActive -> {
                    callStatus = "–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫..."
                    Log.d(TAG, "üìû Status: –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫...")
                }
                isCallActive && !isWebRTCConnected -> {
                    callStatus = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤..."
                    Log.d(TAG, "üìû Status: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤...")
                }
                isCallActive && isWebRTCConnected -> {
                    Log.d(TAG, "üìû Status: –¢–∞–π–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å")
                    // –¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ LaunchedEffect –≤—ã—à–µ
                }
                else -> {
                    callStatus = "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."
                    Log.d(TAG, "üìû Status: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
                }
            }
        }

        // –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(Color.Black)
                .statusBarsPadding()
                .navigationBarsPadding()
        ) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.SpaceBetween
            ) {
                // –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
                ContactInfoSection(
                    contactName = contactName,
                    callStatus = callStatus,
                    modifier = Modifier.weight(1f)
                )

                // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–º
                if (isCallActive) {
                    ActiveCallControlsSection(
                        isMuted = isMuted,
                        isSpeakerOn = isSpeakerOn,
                        onToggleMute = {
                            isMuted = !isMuted
                            onToggleMute()
                        },
                        onToggleSpeaker = {
                            isSpeakerOn = !isSpeakerOn
                            onToggleSpeaker()
                        },
                        modifier = Modifier.weight(1f)
                    )
                } else {
                    // –ü—É—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∫–æ–≥–¥–∞ –∑–≤–æ–Ω–æ–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
                    Spacer(modifier = Modifier.weight(1f))
                }

                // –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                BottomCallControlsSection(
                    isIncomingCall = isIncomingCall,
                    isCallActive = isCallActive,
                    onAcceptCall = {
                        isCallActive = true
                        onAcceptCall()
                    },
                    onEndCall = onEndCall,
                    modifier = Modifier.weight(1f)
                )
            }
        }
    }

    @Composable
    fun ContactInfoSection(
        contactName: String,
        callStatus: String,
        modifier: Modifier = Modifier
    ) {
        Column(
            modifier = modifier
                .fillMaxWidth()
                .wrapContentHeight(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            // –ê–≤–∞—Ç–∞—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞
            Box(
                modifier = Modifier
                    .size(140.dp)
                    .clip(CircleShape)
                    .background(Color(0xFF4CAF50)),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = contactName.take(2).uppercase(),
                    color = Color.White,
                    fontSize = 36.sp,
                    fontWeight = FontWeight.Bold
                )
            }

            Spacer(modifier = Modifier.height(32.dp))

            // –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
            Text(
                text = contactName,
                color = Color.White,
                fontSize = 32.sp,
                fontWeight = FontWeight.Bold,
                textAlign = TextAlign.Center
            )

            Spacer(modifier = Modifier.height(16.dp))

            // –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞
            Text(
                text = callStatus,
                color = Color(0xFFCCCCCC),
                fontSize = 20.sp,
                textAlign = TextAlign.Center
            )
        }
    }

    @Composable
    fun ActiveCallControlsSection(
        isMuted: Boolean,
        isSpeakerOn: Boolean,
        onToggleMute: () -> Unit,
        onToggleSpeaker: () -> Unit,
        modifier: Modifier = Modifier
    ) {
        Column(
            modifier = modifier
                .fillMaxWidth()
                .wrapContentHeight(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly,
                verticalAlignment = Alignment.CenterVertically
            ) {
                // –ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    IconButton(
                        onClick = onToggleMute,
                        modifier = Modifier.size(70.dp)
                    ) {
                        Icon(
                            imageVector = if (isMuted) Icons.Default.MicOff else Icons.Default.Mic,
                            contentDescription = if (isMuted) "–í–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω" else "–í—ã–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω",
                            tint = if (isMuted) Color.Red else Color.White,
                            modifier = Modifier.size(38.dp)
                        )
                    }
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = if (isMuted) "–í–∫–ª. –∑–≤—É–∫" else "–í—ã–∫–ª. –∑–≤—É–∫",
                        color = Color.White,
                        fontSize = 14.sp
                    )
                }

                // –ö–Ω–æ–ø–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∞
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    IconButton(
                        onClick = onToggleSpeaker,
                        modifier = Modifier.size(70.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.VolumeUp,
                            contentDescription = if (isSpeakerOn) "–í—ã–∫–ª—é—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫" else "–í–∫–ª—é—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫",
                            tint = if (isSpeakerOn) Color(0xFF4CAF50) else Color.White,
                            modifier = Modifier.size(38.dp)
                        )
                    }
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = if (isSpeakerOn) "–î–∏–Ω–∞–º–∏–∫" else "–î–∏–Ω–∞–º–∏–∫",
                        color = Color.White,
                        fontSize = 14.sp
                    )
                }
            }
        }
    }
    @Composable
    fun BottomCallControlsSection(
        isIncomingCall: Boolean,
        isCallActive: Boolean,
        onAcceptCall: () -> Unit,
        onEndCall: () -> Unit,
        modifier: Modifier = Modifier
    ) {
        Column(
            modifier = modifier
                .fillMaxWidth()
                .wrapContentHeight(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Bottom
        ) {
            if (isIncomingCall && !isCallActive) {
                // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –í–•–û–î–Ø–©–ï–ì–û –≤—ã–∑–æ–≤–∞ (–µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç)
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceEvenly
                ) {
                    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞
                    FloatingActionButton(
                        onClick = onAcceptCall,
                        containerColor = Color(0xFF4CAF50),
                        modifier = Modifier.size(90.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.Call,
                            contentDescription = "–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤",
                            tint = Color.White,
                            modifier = Modifier.size(40.dp)
                        )
                    }

                    Spacer(modifier = Modifier.width(60.dp))

                    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–∑–æ–≤–∞
                    FloatingActionButton(
                        onClick = onEndCall,
                        containerColor = Color(0xFFF44336),
                        modifier = Modifier.size(90.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.CallEnd,
                            contentDescription = "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤",
                            tint = Color.White,
                            modifier = Modifier.size(40.dp)
                        )
                    }
                }
            } else {
                // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ê–ö–¢–ò–í–ù–û–ì–û/–ò–°–•–û–î–Ø–©–ï–ì–û –≤—ã–∑–æ–≤–∞
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.Center
                ) {
                    // ‚ùó –¢–û–õ–¨–ö–û –û–î–ù–ê –ö–ù–û–ü–ö–ê "–°–ë–†–û–°–ò–¢–¨" –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
                    Button(
                        onClick = onEndCall,
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFFF44336)
                        ),
                        modifier = Modifier
                            .width(200.dp)  // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                            .height(60.dp)
                    ) {
                        Text(
                            text = "–°–±—Ä–æ—Å–∏—Ç—å",
                            color = Color.White,
                            fontSize = 18.sp,
                            fontWeight = FontWeight.Bold
                        )
                    }

                    // ‚ùó –£–ë–†–ê–ù–ê –í–¢–û–†–ê–Ø –ö–ù–û–ü–ö–ê "–ü–†–ò–ù–Ø–¢–¨" –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            Spacer(modifier = Modifier.height(32.dp))
        }
    }
//    @Composable
//    fun BottomCallControlsSection(
//        isIncomingCall: Boolean,
//        isCallActive: Boolean,
//        onAcceptCall: () -> Unit,
//        onEndCall: () -> Unit,
//        modifier: Modifier = Modifier
//    ) {
//        Column(
//            modifier = modifier
//                .fillMaxWidth()
//                .wrapContentHeight(),
//            horizontalAlignment = Alignment.CenterHorizontally,
//            verticalArrangement = Arrangement.Bottom
//        ) {
//            if (isIncomingCall && !isCallActive) {
//                // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
//                Row(
//                    modifier = Modifier.fillMaxWidth(),
//                    horizontalArrangement = Arrangement.SpaceEvenly
//                ) {
//                    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞
//                    FloatingActionButton(
//                        onClick = onAcceptCall,
//                        containerColor = Color(0xFF4CAF50),
//                        modifier = Modifier.size(90.dp)
//                    ) {
//                        Icon(
//                            imageVector = Icons.Default.Call,
//                            contentDescription = "–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤",
//                            tint = Color.White,
//                            modifier = Modifier.size(40.dp)
//                        )
//                    }
//
//                    Spacer(modifier = Modifier.width(60.dp))
//
//                    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–∑–æ–≤–∞
//                    FloatingActionButton(
//                        onClick = onEndCall,
//                        containerColor = Color(0xFFF44336),
//                        modifier = Modifier.size(90.dp)
//                    ) {
//                        Icon(
//                            imageVector = Icons.Default.CallEnd,
//                            contentDescription = "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤",
//                            tint = Color.White,
//                            modifier = Modifier.size(40.dp)
//                        )
//                    }
//                }
//            } else {
//                // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ/–∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
//                Row(
//                    modifier = Modifier.fillMaxWidth(),
//                    horizontalArrangement = Arrangement.SpaceEvenly
//                ) {
//                    // –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å–∏—Ç—å"
//                    Button(
//                        onClick = onEndCall,
//                        colors = ButtonDefaults.buttonColors(
//                            containerColor = Color(0xFFF44336)
//                        ),
//                        modifier = Modifier
//                            .weight(1f)
//                            .padding(horizontal = 12.dp)
//                            .height(60.dp)
//                    ) {
//                        Text(
//                            text = "–°–±—Ä–æ—Å–∏—Ç—å",
//                            color = Color.White,
//                            fontSize = 18.sp,
//                            fontWeight = FontWeight.Bold
//                        )
//                    }
//                    Button(
//                        onClick = onAcceptCall,
//                        colors = ButtonDefaults.buttonColors(
//                            containerColor = Color(0xFF4CAF50)
//                        ),
//                        modifier = Modifier
//                            .weight(1f)
//                            .padding(horizontal = 12.dp)
//                            .height(60.dp)
//                    ) {
//                        Text(
//                            text = "–ü—Ä–∏–Ω—è—Ç—å",
//                            color = Color.White,
//                            fontSize = 15.sp,
//                            fontWeight = FontWeight.Bold
//                        )
//                    }
//
//
//                    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–Ω—è—Ç—å" (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–æ –ø—Ä–∏–Ω—è—Ç–∏—è)
//                    if (!isCallActive) {
//
//                    } else if (isCallActive) {
////
//                    }
//                }
//            }
//
//            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
//            Spacer(modifier = Modifier.height(32.dp))
//        }
//    }
    // –í CallActivity.kt –∑–∞–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥—ã:

//    private fun acceptCall() {
//        Log.d(TAG, "‚úÖ Accepting call via CallManager")
//        stopRinging()
//
//        requestAudioPermissions { granted ->
//            if (granted) {
//                callerId?.let { callerId ->
//                    callId?.let { callId ->
//                        app.getCallManager().acceptIncomingCall()
//                        // –û–±–Ω–æ–≤–ª—è–µ–º UI
////                        isCallActive = true
////                        callStatus = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..."
//                    }
//                }
//            } else {
//                Log.e(TAG, "‚ùå Audio permissions denied")
//                finish()
//            }
//        }
//    }

    private fun endCall() {
        Log.d(TAG, "üìû Ending call")
        stopRinging()

        // üî• –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ActualCall —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º step
        if (isIncomingCall) {
            Log.d(TAG, "‚ùå Rejecting incoming call")
            sendActualCallToServer("reject_call")
        } else {
            Log.d(TAG, "üìû Ending active/outgoing call")
            sendActualCallToServer("end_call")
        }

        CallService.stopService(this)
        finish()
    }
    private fun startOutgoingCall() {
        Log.d(TAG, "üìû Starting outgoing call - CallId: $callId, Target: $callerId")

        if (!app.isWebRTCInitialized()) {
            Log.e(TAG, "‚ùå WebRTC not initialized for outgoing call")
            finish()
            return
        }

        // ‚úÖ –ù–ï –≤—ã–∑—ã–≤–∞–µ–º CallManager.makeCall() –ø–æ–≤—Ç–æ—Ä–Ω–æ - –æ–Ω —É–∂–µ –≤—ã–∑–≤–∞–Ω –≤ ContactsListActivity
        // ‚úÖ –¢–û–õ–¨–ö–û –∑–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ —Å–µ—Å—Å–∏—é
//        app.getWebRTCClient().startAudioSession()
        Log.d(TAG, "üéµ Audio session started for outgoing call")

        // WebRTC negotiation –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç accept_call
    }
//    private fun startOutgoingCall() {
//        Log.d(TAG, "üìû Starting outgoing call - CallId: $callId, Target: $callerId")
//
//        if (!app.isWebRTCInitialized()) {
//            Log.e(TAG, "‚ùå WebRTC not initialized for outgoing call")
//            Toast.makeText(this, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞", Toast.LENGTH_SHORT).show()
//            finish()
//            return
//        }
//
//        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ —Å–µ—Å—Å–∏—é
//        app.getWebRTCClient().startAudioSession()
//
//        if (callerId == null) {
//            Log.e(TAG, "‚ùå No targetUserId for outgoing call")
//            finish()
//            return
//        }
//
//        val success = app.getCallManager().makeCall(callerId!!, contactName)
//        if (!success) {
//            Log.e(TAG, "‚ùå Failed to start outgoing call via CallManager")
//
//            if (callId != null) {
//                val directCallResult = app.getWebRTCClient().callUser(callerId!!, callId!!)
//                if (!directCallResult) {
//                    Log.e(TAG, "‚ùå Direct WebRTC call also failed")
//                    finish()
//                }
//            } else {
//                Log.e(TAG, "‚ùå No callId for direct WebRTC call")
//                finish()
//            }
//        }
//    }
//    private fun startOutgoingCall() {
//        Log.d(TAG, "üìû Starting outgoing call via CallManager")
//        callerId?.let { targetUserId ->
//            val success = app.getCallManager().makeCall(targetUserId, contactName)
//            if (!success) {
//                Log.e(TAG, "‚ùå Failed to start outgoing call")
//                finish()
//            }
//        }
//    }
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

    private fun initializeAndAcceptCall() {
        try {
            // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebRTC –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (!app.isWebRTCInitialized()) {
                val personalId = app.getPersonalId0()
                if (!personalId.isNullOrEmpty()) {
                    app.initializeWebRTC(personalId)
                    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    android.os.Handler(mainLooper).postDelayed({
                        completeCallAcceptance()
                    }, 1500)
                } else {
                    Log.e(TAG, "‚ùå Personal ID not found")
                    finish()
                }
            } else {
                completeCallAcceptance()
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error accepting call: ${e.message}")
            finish()
        }
    }

    private fun completeCallAcceptance() {
        try {
            val webRTCClient = app.getWebRTCClient()

            // 4. –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ —Å–µ—Å—Å–∏—é
//            webRTCClient.startAudioSession()

            // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤—ã–∑–æ–≤–∞
            callerId?.let {
//                webRTCClient.sendCallAccepted(it)
                Log.d(TAG, "üìû Call accepted signal sent to: $it")
            }

            Log.d(TAG, "üéµ Audio call session started successfully")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error in completeCallAcceptance: ${e.message}")
        }
    }



    private fun toggleMute() {
        if (app.isWebRTCInitialized()) {
            app.getWebRTCClient().toggleMute()
        }
    }

    private fun toggleSpeaker() {
        if (app.isWebRTCInitialized()) {
            app.getWebRTCClient().toggleSpeaker()
        }
    }


    private fun startRinging() {
        Log.d(TAG, "üîî Starting ringtone and vibration")

        // –í–∏–±—Ä–∞—Ü–∏—è
        try {
            if (vibrator?.hasVibrator() == true) {
                val pattern = longArrayOf(0, 1000, 1000)
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    vibrator?.vibrate(VibrationEffect.createWaveform(pattern, 0))
                } else {
                    @Suppress("DEPRECATION")
                    vibrator?.vibrate(pattern, 0)
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error starting vibration: ${e.message}")
        }

        // –ó–≤—É–∫ –∑–≤–æ–Ω–∫–∞
        try {
            val ringtoneUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE)
            ringtone = RingtoneManager.getRingtone(applicationContext, ringtoneUri)
            ringtone?.play()
        } catch (e: Exception) {
            Log.e(TAG, "Error playing ringtone: ${e.message}")
        }
    }

    private fun stopRinging() {
        Log.d(TAG, "üîï Stopping ringtone and vibration")

        try {
            vibrator?.cancel()
        } catch (e: Exception) {
            Log.e(TAG, "Error stopping vibration: ${e.message}")
        }

        try {
            ringtone?.stop()
        } catch (e: Exception) {
            Log.e(TAG, "Error stopping ringtone: ${e.message}")
        }
    }

    private fun requestAudioPermissions(callback: (Boolean) -> Unit) {
        val permissions = arrayOf(
            Manifest.permission.RECORD_AUDIO,
            Manifest.permission.MODIFY_AUDIO_SETTINGS
        )

        val allGranted = permissions.all { permission ->
            ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED
        }

        if (allGranted) {
            callback(true)
        } else {
            ActivityCompat.requestPermissions(this, permissions, PERMISSION_REQUEST_CODE)
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == PERMISSION_REQUEST_CODE) {
            val granted = grantResults.all { it == PackageManager.PERMISSION_GRANTED }
            if (granted) {
                if (isIncomingCall) {
                    initializeAndAcceptCall()
                }
            } else {
                Log.e(TAG, "Audio permissions denied")
                finish()
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        stopRinging()
        app.setWebRTCActivityListener(null)
        
        // üî• –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ currentActualCall
        cleanupActualCallObserver()
        
        // üî• SINGLETON: –û—á–∏—â–∞–µ–º instance
        instance = null
    }

    private fun getContactName(userId: String?): String {
        if (userId.isNullOrEmpty()) return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        val contacts = app.contactsLiveData.value ?: emptyList()
        val contact = contacts.find { it.personal_id == userId }
        return contact?.Name ?: "–ö–æ–Ω—Ç–∞–∫—Ç—É"
    }

    private fun formatDuration(seconds: Long): String {
        val minutes = TimeUnit.SECONDS.toMinutes(seconds)
        val remainingSeconds = seconds - TimeUnit.MINUTES.toSeconds(minutes)
        return String.format("%02d:%02d", minutes, remainingSeconds)
    }
    
    // üî• –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° currentActualCall
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–≤–æ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ActualCall
     */
    private fun determineCallType() {
        val currentCall = app.getCurrentActualCall()
        if (currentCall != null) {
            val personalId = app.getPersonalId0()
            // –ï—Å–ª–∏ recipientId —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å personalId - —ç—Ç–æ –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
            isIncomingCall = currentCall.recipientId == personalId
            callId = currentCall.callId
            callerId = if (isIncomingCall) currentCall.callerId else currentCall.recipientId
            contactName = getContactName(callerId)
            
            Log.d(TAG, "üìû Call type determined: ${if (isIncomingCall) "INCOMING" else "OUTGOING"}")
            Log.d(TAG, "üìû CallerId: $callerId, RecipientId: ${currentCall.recipientId}, PersonalId: $personalId")
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è currentActualCall
     */
    private fun setupActualCallObserver() {
        actualCallCallback = { actualCall ->
            Log.d(TAG, "üìû ActualCall updated in CallActivity: ${actualCall?.callId}")
            currentActualCall = actualCall
            
            // üî• –ù–û–í–û–ï: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–≤–æ–Ω–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ActualCall
            actualCall?.let { call ->
                val personalId = app.getPersonalId0()
                isIncomingCall = call.recipientId == personalId
                callId = call.callId
                callerId = if (isIncomingCall) call.callerId else call.recipientId
                contactName = getContactName(callerId)
                
                Log.d(TAG, "üìû Call type updated: ${if (isIncomingCall) "INCOMING" else "OUTGOING"}")
                
                when (call.step) {
                    "accept_call" -> {
                        Log.d(TAG, "‚úÖ Call accepted - updating UI")
                        // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∑–≤–æ–Ω–∫–∞
                    }
                    "reject_call" -> {
                        Log.d(TAG, "‚ùå Call rejected - closing in 5 seconds")
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º CallActivity —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                        Handler(Looper.getMainLooper()).postDelayed({
                            finish()
                        }, 5000)
                    }
                    "end_call" -> {
                        Log.d(TAG, "üìû Call ended - closing immediately")
                        finish()
                    }
                }
            }
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        app.subscribeToActualCallChanges(actualCallCallback!!)
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ ActualCall –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º step
     */
    private fun sendActualCallToServer(step: String) {
        currentActualCall?.let { call ->
            val updatedCall = call.copy(step = step)
            app.setCurrentActualCall(updatedCall)
            Log.d(TAG, "üì§ Sent ActualCall to server with step: $step")
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ currentActualCall
     */
    private fun cleanupActualCallObserver() {
        actualCallCallback?.let { callback ->
            app.unsubscribeFromActualCallChanges(callback)
            actualCallCallback = null
        }
    }
}